"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[566],{9850:(x,f,p)=>{p.r(f),p.d(f,{RecipesModule:()=>v});var y=p(9808),g=p(215),b=p(4466),i=p(4834),e=p(4893),Z=p(4336),u=p(4521),m=p(7297);const w=[{path:"mikroorm",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-mikroorm"]],features:[e.qOj],decls:347,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/mikroorm.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mikroorm"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/mikro-orm/nestjs"],["appAnchor","","id","installation"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/usage-with-sql/"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/configuration"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/installation#setting-up-the-commandline-tool"],[1,"language-ts"],["appAnchor","","id","repositories"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/repositories"],["appAnchor","","id","using-custom-repositories"],["appAnchor","","id","load-entities-automatically"],["appAnchor","","id","serialization"],[1,"warning"],["href","/techniques/serialization"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/serializing"],["appAnchor","","id","request-scoped-handlers-in-queues"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/docs/identity-map"],["appAnchor","","id","using-asynclocalstorage-for-request-context"],["appAnchor","","id","testing"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/mikro-orm/nestjs-realworld-example-app"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"MikroORM"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"This recipe is here to help users getting started with MikroORM in Nest. MikroORM is the TypeScript ORM for Node.js based on Data Mapper, Unit of Work and Identity Map patterns. It is a great alternative to TypeORM and migration from TypeORM should be fairly easy. The complete documentation on MikroORM can be found "),e.TgZ(9,"a",6),e._uU(10,"here"),e.qZA(),e._uU(11,"."),e.qZA(),e.TgZ(12,"blockquote",7)(13,"strong"),e._uU(14,"info"),e.qZA(),e.TgZ(15,"code"),e._uU(16,"@mikro-orm/nestjs"),e.qZA(),e._uU(17," is a third party package and is not managed by the NestJS core team. Please, report any issues found with the library in the "),e.TgZ(18,"a",8),e._uU(19,"appropriate repository"),e.qZA(),e._uU(20,".\n"),e.qZA(),e.TgZ(21,"h4",9)(22,"span"),e._uU(23,"Installation"),e.qZA()(),e.TgZ(24,"p"),e._uU(25,"Easiest way to integrate MikroORM to Nest is via "),e.TgZ(26,"a",8)(27,"code"),e._uU(28,"@mikro-orm/nestjs"),e.qZA(),e._uU(29," module"),e.qZA(),e._uU(30,".\nSimply install it next to Nest, MikroORM and underlying driver:"),e.qZA(),e.TgZ(31,"pre")(32,"code",10),e._uU(33,"\n$ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/mysql # for mysql/mariadb\n"),e.qZA()(),e.TgZ(34,"p"),e._uU(35,"MikroORM also supports "),e.TgZ(36,"code"),e._uU(37,"postgres"),e.qZA(),e._uU(38,", "),e.TgZ(39,"code"),e._uU(40,"sqlite"),e.qZA(),e._uU(41,", and "),e.TgZ(42,"code"),e._uU(43,"mongo"),e.qZA(),e._uU(44,". See the "),e.TgZ(45,"a",11),e._uU(46,"official docs"),e.qZA(),e._uU(47," for all drivers."),e.qZA(),e.TgZ(48,"p"),e._uU(49,"Once the installation process is completed, we can import the "),e.TgZ(50,"code"),e._uU(51,"MikroOrmModule"),e.qZA(),e._uU(52," into the root "),e.TgZ(53,"code"),e._uU(54,"AppModule"),e.qZA(),e._uU(55,"."),e.qZA(),e.TgZ(56,"pre")(57,"code",12),e._uU(58,"\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      entities: ['./dist/entities'],\n      entitiesTs: ['./src/entities'],\n      dbName: 'my-db-name.sqlite3',\n      type: 'sqlite',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(59,"p"),e._uU(60,"The "),e.TgZ(61,"code"),e._uU(62,"forRoot()"),e.qZA(),e._uU(63," method accepts the same configuration object as "),e.TgZ(64,"code"),e._uU(65,"init()"),e.qZA(),e._uU(66," from the MikroORM package. Check "),e.TgZ(67,"a",13),e._uU(68,"this page"),e.qZA(),e._uU(69," for the complete configuration documentation."),e.qZA(),e.TgZ(70,"p"),e._uU(71,"Alternatively we can "),e.TgZ(72,"a",14),e._uU(73,"configure the CLI"),e.qZA(),e._uU(74," by creating a configuration file "),e.TgZ(75,"code"),e._uU(76,"mikro-orm.config.ts"),e.qZA(),e._uU(77," and then call the "),e.TgZ(78,"code"),e._uU(79,"forRoot()"),e.qZA(),e._uU(80," without any arguments. This won't work when you use a build tools that use tree shaking."),e.qZA(),e.TgZ(81,"pre")(82,"code",12),e._uU(83,"\n@Module({\n  imports: [\n    MikroOrmModule.forRoot(),\n  ],\n  ...\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(84,"p"),e._uU(85,"Afterward, the "),e.TgZ(86,"code"),e._uU(87,"EntityManager"),e.qZA(),e._uU(88," will be available to inject across entire project (without importing any module elsewhere)."),e.qZA(),e.TgZ(89,"pre")(90,"code",15),e._uU(91,"\nimport { MikroORM } from '@mikro-orm/core';\n// Import EntityManager from your driver package or `@mikro-orm/knex`\nimport { EntityManager } from '@mikro-orm/mysql';\n\n@Injectable()\nexport class MyService {\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly em: EntityManager,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(92,"blockquote",7)(93,"strong"),e._uU(94,"info"),e.qZA(),e._uU(95," Notice that the "),e.TgZ(96,"code"),e._uU(97,"EntityManager"),e.qZA(),e._uU(98," is imported from the "),e.TgZ(99,"code"),e._uU(100,"@mikro-orm/driver"),e.qZA(),e._uU(101," package, where driver is "),e.TgZ(102,"code"),e._uU(103,"mysql"),e.qZA(),e._uU(104,", "),e.TgZ(105,"code"),e._uU(106,"sqlite"),e.qZA(),e._uU(107,", "),e.TgZ(108,"code"),e._uU(109,"postgres"),e.qZA(),e._uU(110," or what driver you are using. In case you have "),e.TgZ(111,"code"),e._uU(112,"@mikro-orm/knex"),e.qZA(),e._uU(113," installed as a dependency, you can also import the "),e.TgZ(114,"code"),e._uU(115,"EntityManager"),e.qZA(),e._uU(116," from there.\n"),e.qZA(),e.TgZ(117,"h4",16)(118,"span"),e._uU(119,"Repositories"),e.qZA()(),e.TgZ(120,"p"),e._uU(121,"MikroORM supports the repository design pattern. For every entity we can create a repository. Read the complete documentation on repositories "),e.TgZ(122,"a",17),e._uU(123,"here"),e.qZA(),e._uU(124,". To define which repositories should be registered in the current scope you can use the "),e.TgZ(125,"code"),e._uU(126,"forFeature()"),e.qZA(),e._uU(127," method. For example, in this way:"),e.qZA(),e.TgZ(128,"blockquote",7)(129,"strong"),e._uU(130,"info"),e.qZA(),e._uU(131," You should "),e.TgZ(132,"strong"),e._uU(133,"not"),e.qZA(),e._uU(134," register your base entities via "),e.TgZ(135,"code"),e._uU(136,"forFeature()"),e.qZA(),e._uU(137,", as there are no\nrepositories for those. On the other hand, base entities need to be part of the list in "),e.TgZ(138,"code"),e._uU(139,"forRoot()"),e.qZA(),e._uU(140," (or in the ORM config in general).\n"),e.qZA(),e.TgZ(141,"pre")(142,"code",12),e._uU(143,"\n// photo.module.ts\n@Module({\n  imports: [MikroOrmModule.forFeature([Photo])],\n  providers: [PhotoService],\n  controllers: [PhotoController],\n})\nexport class PhotoModule {}\n"),e.qZA()(),e.TgZ(144,"p"),e._uU(145,"and import it into the root "),e.TgZ(146,"code"),e._uU(147,"AppModule"),e.qZA(),e._uU(148,":"),e.qZA(),e.TgZ(149,"pre")(150,"code",12),e._uU(151,"\n// app.module.ts\n@Module({\n  imports: [MikroOrmModule.forRoot(...), PhotoModule],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(152,"p"),e._uU(153,"In this way we can inject the "),e.TgZ(154,"code"),e._uU(155,"PhotoRepository"),e.qZA(),e._uU(156," to the "),e.TgZ(157,"code"),e._uU(158,"PhotoService"),e.qZA(),e._uU(159," using the "),e.TgZ(160,"code"),e._uU(161,"@InjectRepository()"),e.qZA(),e._uU(162," decorator:"),e.qZA(),e.TgZ(163,"pre")(164,"code",12),e._uU(165,"\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @InjectRepository(Photo)\n    private readonly photoRepository: EntityRepository<Photo>,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(166,"h4",18)(167,"span"),e._uU(168,"Using custom repositories"),e.qZA()(),e.TgZ(169,"p"),e._uU(170,"When using custom repositories, we can get around the need for "),e.TgZ(171,"code"),e._uU(172,"@InjectRepository()"),e.qZA(),e._uU(173,"\ndecorator by naming our repositories the same way as "),e.TgZ(174,"code"),e._uU(175,"getRepositoryToken()"),e.qZA(),e._uU(176," method do:"),e.qZA(),e.TgZ(177,"pre")(178,"code",15),e._uU(179,"\nexport const getRepositoryToken = <T>(entity: EntityName<T>) =>\n  `${Utils.className(entity)}Repository`;\n"),e.qZA()(),e.TgZ(180,"p"),e._uU(181,"In other words, as long as we name the repository same was as the entity is called,\nappending "),e.TgZ(182,"code"),e._uU(183,"Repository"),e.qZA(),e._uU(184," suffix, the repository will be registered automatically in\nthe Nest DI container."),e.qZA(),e.TgZ(185,"pre")(186,"code",15),e._uU(187,"\n// `**./author.entity.ts**`\n@Entity()\nexport class Author {\n  // to allow inference in `em.getRepository()`\n  [EntityRepositoryType]?: AuthorRepository;\n}\n\n// `**./author.repository.ts**`\n@Repository(Author)\nexport class AuthorRepository extends EntityRepository<Author> {\n  // your custom methods...\n}\n"),e.qZA()(),e.TgZ(188,"p"),e._uU(189,"As the custom repository name is the same as what "),e.TgZ(190,"code"),e._uU(191,"getRepositoryToken()"),e.qZA(),e._uU(192," would\nreturn, we do not need the "),e.TgZ(193,"code"),e._uU(194,"@InjectRepository()"),e.qZA(),e._uU(195," decorator anymore:"),e.qZA(),e.TgZ(196,"pre")(197,"code",15),e._uU(198,"\n@Injectable()\nexport class MyService {\n  constructor(private readonly repo: AuthorRepository) {}\n}\n"),e.qZA()(),e.TgZ(199,"h4",19)(200,"span"),e._uU(201,"Load entities automatically"),e.qZA()(),e.TgZ(202,"blockquote",7)(203,"strong"),e._uU(204,"info"),e.qZA(),e.TgZ(205,"code"),e._uU(206,"autoLoadEntities"),e.qZA(),e._uU(207," option was added in v4.1.0\n"),e.qZA(),e.TgZ(208,"p"),e._uU(209,"Manually adding entities to the entities array of the connection options can be\ntedious. In addition, referencing entities from the root module breaks application\ndomain boundaries and causes leaking implementation details to other parts of the\napplication. To solve this issue, static glob paths can be used."),e.qZA(),e.TgZ(210,"p"),e._uU(211,"Note, however, that glob paths are not supported by webpack, so if you are building\nyour application within a monorepo, you won't be able to use them. To address this\nissue, an alternative solution is provided. To automatically load entities, set the\n"),e.TgZ(212,"code"),e._uU(213,"autoLoadEntities"),e.qZA(),e._uU(214," property of the configuration object (passed into the "),e.TgZ(215,"code"),e._uU(216,"forRoot()"),e.qZA(),e._uU(217,"\nmethod) to "),e.TgZ(218,"code"),e._uU(219,"true"),e.qZA(),e._uU(220,", as shown below:"),e.qZA(),e.TgZ(221,"pre")(222,"code",15),e._uU(223,"\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      ...\n      autoLoadEntities: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(224,"p"),e._uU(225,"With that option specified, every entity registered through the "),e.TgZ(226,"code"),e._uU(227,"forFeature()"),e.qZA(),e._uU(228,"\nmethod will be automatically added to the entities array of the configuration\nobject."),e.qZA(),e.TgZ(229,"blockquote",7)(230,"strong"),e._uU(231,"info"),e.qZA(),e._uU(232," Note that entities that aren't registered through the "),e.TgZ(233,"code"),e._uU(234,"forFeature()"),e.qZA(),e._uU(235," method, but\nare only referenced from the entity (via a relationship), won't be included by\nway of the "),e.TgZ(236,"code"),e._uU(237,"autoLoadEntities"),e.qZA(),e._uU(238," setting.\n"),e.qZA(),e.TgZ(239,"blockquote",7)(240,"strong"),e._uU(241,"info"),e.qZA(),e._uU(242," Using "),e.TgZ(243,"code"),e._uU(244,"autoLoadEntities"),e.qZA(),e._uU(245," also has no effect on the MikroORM CLI - for that we\nstill need CLI config with the full list of entities. On the other hand, we can\nuse globs there, as the CLI won't go thru webpack.\n"),e.qZA(),e.TgZ(246,"h4",20)(247,"span"),e._uU(248,"Serialization"),e.qZA()(),e.TgZ(249,"blockquote",21)(250,"strong"),e._uU(251,"Note"),e.qZA(),e._uU(252," MikroORM wraps every single entity relation in a "),e.TgZ(253,"code"),e._uU(254,"Reference<T>"),e.qZA(),e._uU(255," or a "),e.TgZ(256,"code"),e._uU(257,"Collection<T>"),e.qZA(),e._uU(258," object, in order to provide better type-safety. This will make "),e.TgZ(259,"a",22),e._uU(260,"Nest's built-in serializer"),e.qZA(),e._uU(261," blind to any wrapped relations. In other words, if you return MikroORM entities from your HTTP or WebSocket handlers, all of their relations will NOT be serialized.\n"),e.qZA(),e.TgZ(262,"p"),e._uU(263,"Luckily, MikroORM provides a "),e.TgZ(264,"a",23),e._uU(265,"serialization API"),e.qZA(),e._uU(266," which can be used in lieu of "),e.TgZ(267,"code"),e._uU(268,"ClassSerializerInterceptor"),e.qZA(),e._uU(269,"."),e.qZA(),e.TgZ(270,"pre")(271,"code",12),e._uU(272,"\n@Entity()\nexport class Book {\n  @Property({ hidden: true }) // Equivalent of class-transformer's `@Exclude`\n  hiddenField = Date.now();\n\n  @Property({ persist: false }) // Similar to class-transformer's `@Expose()`. Will only exist in memory, and will be serialized.\n  count?: number;\n\n  @ManyToOne({\n    serializer: (value) => value.name,\n    serializedName: 'authorName',\n  }) // Equivalent of class-transformer's `@Transform()`\n  author: Author;\n}\n"),e.qZA()(),e.TgZ(273,"h4",24)(274,"span"),e._uU(275,"Request scoped handlers in queues"),e.qZA()(),e.TgZ(276,"blockquote",7)(277,"strong"),e._uU(278,"info"),e.qZA(),e.TgZ(279,"code"),e._uU(280,"@UseRequestContext()"),e.qZA(),e._uU(281," decorator was added in v4.1.0\n"),e.qZA(),e.TgZ(282,"p"),e._uU(283,"As mentioned in the "),e.TgZ(284,"a",25),e._uU(285,"docs"),e.qZA(),e._uU(286,", we need a clean state for each request. That is handled automatically thanks to the "),e.TgZ(287,"code"),e._uU(288,"RequestContext"),e.qZA(),e._uU(289," helper registered via middleware."),e.qZA(),e.TgZ(290,"p"),e._uU(291,"But middlewares are executed only for regular HTTP request handles, what if we need\na request scoped method outside of that? One example of that is queue handlers or\nscheduled tasks."),e.qZA(),e.TgZ(292,"p"),e._uU(293,"We can use the "),e.TgZ(294,"code"),e._uU(295,"@UseRequestContext()"),e.qZA(),e._uU(296," decorator. It requires you to first inject the\n"),e.TgZ(297,"code"),e._uU(298,"MikroORM"),e.qZA(),e._uU(299," instance to current context, it will be then used to create the context\nfor you. Under the hood, the decorator will register new request context for your\nmethod and execute it inside the context."),e.qZA(),e.TgZ(300,"pre")(301,"code",15),e._uU(302,"\n@Injectable()\nexport class MyService {\n  constructor(private readonly orm: MikroORM) {}\n\n  @UseRequestContext()\n  async doSomething() {\n    // this will be executed in a separate context\n  }\n}\n"),e.qZA()(),e.TgZ(303,"h4",26)(304,"span"),e._uU(305,"Using "),e.TgZ(306,"code"),e._uU(307,"AsyncLocalStorage"),e.qZA(),e._uU(308," for request context"),e.qZA()(),e.TgZ(309,"p"),e._uU(310,"By default, the "),e.TgZ(311,"code"),e._uU(312,"domain"),e.qZA(),e._uU(313," api is used in the "),e.TgZ(314,"code"),e._uU(315,"RequestContext"),e.qZA(),e._uU(316," helper. Since "),e.TgZ(317,"code"),e._uU(318,"@mikro-orm/core@4.0.3"),e.qZA(),e._uU(319,",\nyou can use the new "),e.TgZ(320,"code"),e._uU(321,"AsyncLocalStorage"),e.qZA(),e._uU(322," too, if you are on up to date node version:"),e.qZA(),e.TgZ(323,"pre")(324,"code",12),e._uU(325,"\n// create new (global) storage instance\nconst storage = new AsyncLocalStorage<EntityManager>();\n\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      // ...\n      registerRequestContext: false, // disable automatatic middleware\n      context: () => storage.getStore(), // use our AsyncLocalStorage instance\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n// register the request context middleware\nconst app = await NestFactory.create(AppModule, { ... });\nconst orm = app.get(MikroORM);\n\napp.use((req, res, next) => {\n  storage.run(orm.em.fork(true, true), next);\n});\n"),e.qZA()(),e.TgZ(326,"h4",27)(327,"span"),e._uU(328,"Testing"),e.qZA()(),e.TgZ(329,"p"),e._uU(330,"The "),e.TgZ(331,"code"),e._uU(332,"@mikro-orm/nestjs"),e.qZA(),e._uU(333," package exposes "),e.TgZ(334,"code"),e._uU(335,"getRepositoryToken()"),e.qZA(),e._uU(336," function that returns prepared token based on a given entity to allow mocking the repository."),e.qZA(),e.TgZ(337,"pre")(338,"code",12),e._uU(339,"\n@Module({\n  providers: [\n    PhotoService,\n    {\n      provide: getRepositoryToken(Photo),\n      useValue: mockedRepository,\n    },\n  ],\n})\nexport class PhotoModule {}\n"),e.qZA()(),e.TgZ(340,"h4",28)(341,"span"),e._uU(342,"Example"),e.qZA()(),e.TgZ(343,"p"),e._uU(344,"A real world example of NestJS with MikroORM can be found "),e.TgZ(345,"a",29),e._uU(346,"here"),e.qZA()()())},dependencies:[u.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"MikroORM"}},{path:"sql-typeorm",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-sql-typeorm"]],features:[e.qOj],decls:215,vars:24,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/sql-typeorm.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","sql-typeorm"],["id","this-chapter-applies-only-to-typescript"],[1,""],["routerLink","/techniques/sql"],["rel","nofollow","target","_blank","href","https://github.com/typeorm/typeorm"],["appAnchor","","id","getting-started"],[1,"language-bash"],["routerLink","/fundamentals/async-components"],[1,"filename"],["appf2446a6789a90ad4d815cbc6109efbc26b15959f",""],[1,"language-typescript"],[1,"warning"],[1,"info"],["appa9c89d0a1b7687336939abe4886293afaf18594e",""],["appAnchor","","id","repository-pattern"],["app467af1f380815dc11aad4b382225ee60e3ea54c8",""],["app5f31f14554a4d95a4e9a4fe71796f275ecb2a6e6",""],["app722b465044612d4b69220bab6dba9c98de23fbea",""],["app0bb62d5f8060f4df37e28aa048abd16ec4a84634",""]],template:function(o,a){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"SQL (TypeORM)"),e.qZA(),e.TgZ(7,"h5",6),e._uU(8,"This chapter applies only to TypeScript"),e.qZA(),e.TgZ(9,"blockquote",7)(10,"strong"),e._uU(11,"Warning"),e.qZA(),e._uU(12," In this article, you'll learn how to create a "),e.TgZ(13,"code"),e._uU(14,"DatabaseModule"),e.qZA(),e._uU(15," based on the "),e.TgZ(16,"strong"),e._uU(17,"TypeORM"),e.qZA(),e._uU(18," package from scratch using custom providers mechanism. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated "),e.TgZ(19,"code"),e._uU(20,"@nestjs/typeorm"),e.qZA(),e._uU(21," package. To learn more, see "),e.TgZ(22,"a",8),e._uU(23,"here"),e.qZA(),e._uU(24,".\n"),e.qZA(),e.TgZ(25,"p")(26,"a",9),e._uU(27,"TypeORM"),e.qZA(),e._uU(28," is definitely the most mature Object Relational Mapper (ORM) available in the node.js world. Since it's written in TypeScript, it works pretty well with the Nest framework."),e.qZA(),e.TgZ(29,"h4",10)(30,"span"),e._uU(31,"Getting started"),e.qZA()(),e.TgZ(32,"p"),e._uU(33,"To start the adventure with this library we have to install all required dependencies:"),e.qZA(),e.TgZ(34,"pre")(35,"code",11),e._uU(36,"\n$ npm install --save typeorm mysql2\n"),e.qZA()(),e.TgZ(37,"p"),e._uU(38,"The first step we need to do is to establish the connection with our database using "),e.TgZ(39,"code"),e._uU(40,"createConnection()"),e.qZA(),e._uU(41," function imported from the "),e.TgZ(42,"code"),e._uU(43,"typeorm"),e.qZA(),e._uU(44," package. The "),e.TgZ(45,"code"),e._uU(46,"createConnection()"),e.qZA(),e._uU(47," function returns a "),e.TgZ(48,"code"),e._uU(49,"Promise"),e.qZA(),e._uU(50,", and therefore we have to create an "),e.TgZ(51,"a",12),e._uU(52,"async provider"),e.qZA(),e._uU(53,"."),e.qZA(),e.TgZ(54,"span",13),e._uU(55),e.ALo(56,"extension"),e._UZ(57,"app-tabs",null,14),e.qZA(),e.TgZ(59,"pre")(60,"code",15),e._uU(61,"\nimport { DataSource } from 'typeorm';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATA_SOURCE',\n    useFactory: async () => {\n      const dataSource = new DataSource({\n        type: 'mysql',\n        host: 'localhost',\n        port: 3306,\n        username: 'root',\n        password: 'root',\n        database: 'test',\n        entities: [\n            __dirname + '/../**/*.entity{.ts,.js}',\n        ],\n        synchronize: true,\n      });\n\n      return dataSource.initialize();\n    },\n  },\n];\n"),e.qZA()(),e.TgZ(62,"blockquote",16)(63,"strong"),e._uU(64,"Warning"),e.qZA(),e._uU(65," Setting "),e.TgZ(66,"code"),e._uU(67,"synchronize: true"),e.qZA(),e._uU(68," shouldn't be used in production - otherwise you can lose production data.\n"),e.qZA(),e.TgZ(69,"blockquote",17)(70,"strong"),e._uU(71,"Hint"),e.qZA(),e._uU(72," Following best practices, we declared the custom provider in the separated file which has a "),e.TgZ(73,"code"),e._uU(74,"*.providers.ts"),e.qZA(),e._uU(75," suffix.\n"),e.qZA(),e.TgZ(76,"p"),e._uU(77,"Then, we need to export these providers to make them "),e.TgZ(78,"strong"),e._uU(79,"accessible"),e.qZA(),e._uU(80," for the rest of the application."),e.qZA(),e.TgZ(81,"span",13),e._uU(82),e.ALo(83,"extension"),e._UZ(84,"app-tabs",null,18),e.qZA(),e.TgZ(86,"pre")(87,"code",15),e._uU(88,"\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n"),e.qZA()(),e.TgZ(89,"p"),e._uU(90,"Now we can inject the "),e.TgZ(91,"code"),e._uU(92,"Connection"),e.qZA(),e._uU(93," object using "),e.TgZ(94,"code"),e._uU(95,"@Inject()"),e.qZA(),e._uU(96," decorator. Each class that would depend on the "),e.TgZ(97,"code"),e._uU(98,"Connection"),e.qZA(),e._uU(99," async provider will wait until a "),e.TgZ(100,"code"),e._uU(101,"Promise"),e.qZA(),e._uU(102," is resolved."),e.qZA(),e.TgZ(103,"h4",19)(104,"span"),e._uU(105,"Repository pattern"),e.qZA()(),e.TgZ(106,"p"),e._uU(107,"The "),e.TgZ(108,"a",9),e._uU(109,"TypeORM"),e.qZA(),e._uU(110," supports the repository design pattern, thus each entity has its own Repository. These repositories can be obtained from the database connection."),e.qZA(),e.TgZ(111,"p"),e._uU(112,"But firstly, we need at least one entity. We are going to reuse the "),e.TgZ(113,"code"),e._uU(114,"Photo"),e.qZA(),e._uU(115," entity from the official documentation."),e.qZA(),e.TgZ(116,"span",13),e._uU(117),e.ALo(118,"extension"),e._UZ(119,"app-tabs",null,20),e.qZA(),e.TgZ(121,"pre")(122,"code",15),e._uU(123,"\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Photo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 500 })\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column('int')\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n"),e.qZA()(),e.TgZ(124,"p"),e._uU(125,"The "),e.TgZ(126,"code"),e._uU(127,"Photo"),e.qZA(),e._uU(128," entity belongs to the "),e.TgZ(129,"code"),e._uU(130,"photo"),e.qZA(),e._uU(131," directory. This directory represents the "),e.TgZ(132,"code"),e._uU(133,"PhotoModule"),e.qZA(),e._uU(134,". Now, let's create a "),e.TgZ(135,"strong"),e._uU(136,"Repository"),e.qZA(),e._uU(137," provider:"),e.qZA(),e.TgZ(138,"span",13),e._uU(139),e.ALo(140,"extension"),e._UZ(141,"app-tabs",null,21),e.qZA(),e.TgZ(143,"pre")(144,"code",15),e._uU(145,"\nimport { DataSource } from 'typeorm';\nimport { Photo } from './photo.entity';\n\nexport const photoProviders = [\n  {\n    provide: 'PHOTO_REPOSITORY',\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),\n    inject: ['DATA_SOURCE'],\n  },\n];\n"),e.qZA()(),e.TgZ(146,"blockquote",16)(147,"strong"),e._uU(148,"Warning"),e.qZA(),e._uU(149," In the real-world applications you should avoid "),e.TgZ(150,"strong"),e._uU(151,"magic strings"),e.qZA(),e._uU(152,". Both "),e.TgZ(153,"code"),e._uU(154,"PHOTO_REPOSITORY"),e.qZA(),e._uU(155," and "),e.TgZ(156,"code"),e._uU(157,"DATABASE_CONNECTION"),e.qZA(),e._uU(158," should be kept in the separated "),e.TgZ(159,"code"),e._uU(160,"constants.ts"),e.qZA(),e._uU(161," file.\n"),e.qZA(),e.TgZ(162,"p"),e._uU(163,"Now we can inject the "),e.TgZ(164,"code"),e._uU(165,"Repository<Photo>"),e.qZA(),e._uU(166," to the "),e.TgZ(167,"code"),e._uU(168,"PhotoService"),e.qZA(),e._uU(169," using the "),e.TgZ(170,"code"),e._uU(171,"@Inject()"),e.qZA(),e._uU(172," decorator:"),e.qZA(),e.TgZ(173,"span",13),e._uU(174),e.ALo(175,"extension"),e._UZ(176,"app-tabs",null,22),e.qZA(),e.TgZ(178,"pre")(179,"code",15),e._uU(180,"\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @Inject('PHOTO_REPOSITORY')\n    private photoRepository: Repository<Photo>,\n  ) {}\n\n  async findAll(): Promise<Photo[]> {\n    return this.photoRepository.find();\n  }\n}\n"),e.qZA()(),e.TgZ(181,"p"),e._uU(182,"The database connection is "),e.TgZ(183,"strong"),e._uU(184,"asynchronous"),e.qZA(),e._uU(185,", but Nest makes this process completely invisible for the end-user. The "),e.TgZ(186,"code"),e._uU(187,"PhotoRepository"),e.qZA(),e._uU(188," is waiting for the db connection, and the "),e.TgZ(189,"code"),e._uU(190,"PhotoService"),e.qZA(),e._uU(191," is delayed until repository is ready to use. The entire application can start when each class is instantiated."),e.qZA(),e.TgZ(192,"p"),e._uU(193,"Here is a final "),e.TgZ(194,"code"),e._uU(195,"PhotoModule"),e.qZA(),e._uU(196,":"),e.qZA(),e.TgZ(197,"span",13),e._uU(198),e.ALo(199,"extension"),e._UZ(200,"app-tabs",null,23),e.qZA(),e.TgZ(202,"pre")(203,"code",15),e._uU(204,"\nimport { Module } from '@nestjs/common';\nimport { DatabaseModule } from '../database/database.module';\nimport { photoProviders } from './photo.providers';\nimport { PhotoService } from './photo.service';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    ...photoProviders,\n    PhotoService,\n  ],\n})\nexport class PhotoModule {}\n"),e.qZA()(),e.TgZ(205,"blockquote",17)(206,"strong"),e._uU(207,"Hint"),e.qZA(),e._uU(208," Do not forget to import the "),e.TgZ(209,"code"),e._uU(210,"PhotoModule"),e.qZA(),e._uU(211," into the root "),e.TgZ(212,"code"),e._uU(213,"AppModule"),e.qZA(),e._uU(214,".\n"),e.qZA()()),2&o){const r=e.MAs(58),c=e.MAs(85),l=e.MAs(120),d=e.MAs(142),s=e.MAs(177),h=e.MAs(201);e.xp6(55),e.hij(" ",e.xi3(56,6,"database.providers",r.isJsActive),"\n"),e.xp6(27),e.hij(" ",e.xi3(83,9,"database.module",c.isJsActive),"\n"),e.xp6(35),e.hij(" ",e.xi3(118,12,"photo.entity",l.isJsActive),"\n"),e.xp6(22),e.hij(" ",e.xi3(140,15,"photo.providers",d.isJsActive),"\n"),e.xp6(35),e.hij(" ",e.xi3(175,18,"photo.service",s.isJsActive),"\n"),e.xp6(24),e.hij(" ",e.xi3(199,21,"photo.module",h.isJsActive),"\n")}},dependencies:[Z.n,u.U,g.yS,m.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"SQL (TypeORM)"}},{path:"mongodb",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-mongodb"]],features:[e.qOj],decls:226,vars:36,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/mongodb.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mongodb-mongoose"],[1,""],["routerLink","/techniques/mongodb"],["rel","nofollow","target","_blank","href","https://mongoosejs.com"],["rel","nofollow","target","_blank","href","https://www.mongodb.org/"],["appAnchor","","id","getting-started"],[1,"language-typescript"],["routerLink","/fundamentals/async-components"],[1,"filename"],["app0348b390c7d779863516fd02ce1594c4ef9a75d6",""],[1,"info"],["appe3901eeab7174722d3e9030dc715c0199c12e30a",""],["appAnchor","","id","model-injection"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/guide.html"],["appf8665b533911d1e7232307197483a6f197286184",""],["app00423fa7410b22390e08a8d5d6fd369b53954e08",""],[1,"warning"],["app8c798df584841aa2e2c8b48e132c10ee0c0abf93",""],["app53fa73f944426e353449ba1475854aa13e87c322",""]],template:function(o,a){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"MongoDB (Mongoose)"),e.qZA(),e.TgZ(7,"blockquote",6)(8,"strong"),e._uU(9,"Warning"),e.qZA(),e._uU(10," In this article, you'll learn how to create a "),e.TgZ(11,"code"),e._uU(12,"DatabaseModule"),e.qZA(),e._uU(13," based on the "),e.TgZ(14,"strong"),e._uU(15,"Mongoose"),e.qZA(),e._uU(16," package from scratch using custom components. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated "),e.TgZ(17,"code"),e._uU(18,"@nestjs/mongoose"),e.qZA(),e._uU(19," package. To learn more, see "),e.TgZ(20,"a",7),e._uU(21,"here"),e.qZA(),e._uU(22,".\n"),e.qZA(),e.TgZ(23,"p")(24,"a",8),e._uU(25,"Mongoose"),e.qZA(),e._uU(26," is the most popular "),e.TgZ(27,"a",9),e._uU(28,"MongoDB"),e.qZA(),e._uU(29," object modeling tool."),e.qZA(),e.TgZ(30,"h4",10)(31,"span"),e._uU(32,"Getting started"),e.qZA()(),e.TgZ(33,"p"),e._uU(34,"To start the adventure with this library we have to install all required dependencies:"),e.qZA(),e.TgZ(35,"pre")(36,"code",11),e._uU(37,"\n$ npm install --save mongoose\n"),e.qZA()(),e.TgZ(38,"p"),e._uU(39,"The first step we need to do is to establish the connection with our database using "),e.TgZ(40,"code"),e._uU(41,"connect()"),e.qZA(),e._uU(42," function. The "),e.TgZ(43,"code"),e._uU(44,"connect()"),e.qZA(),e._uU(45," function returns a "),e.TgZ(46,"code"),e._uU(47,"Promise"),e.qZA(),e._uU(48,", and therefore we have to create an "),e.TgZ(49,"a",12),e._uU(50,"async provider"),e.qZA(),e._uU(51,"."),e.qZA(),e.TgZ(52,"span",13),e._uU(53),e.ALo(54,"extension"),e._UZ(55,"app-tabs",null,14),e.qZA(),e.TgZ(57,"pre")(58,"code",11),e._uU(59,"\nimport * as mongoose from 'mongoose';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: (): Promise<typeof mongoose> =>\n      mongoose.connect('mongodb://localhost/nest'),\n  },\n];\n"),e.qZA()(),e.TgZ(60,"pre")(61,"code",11),e._uU(62,"\nimport * as mongoose from 'mongoose';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: () => mongoose.connect('mongodb://localhost/nest'),\n  },\n];\n"),e.qZA()(),e.TgZ(63,"blockquote",15)(64,"strong"),e._uU(65,"Hint"),e.qZA(),e._uU(66," Following best practices, we declared the custom provider in the separated file which has a "),e.TgZ(67,"code"),e._uU(68,"*.providers.ts"),e.qZA(),e._uU(69," suffix.\n"),e.qZA(),e.TgZ(70,"p"),e._uU(71,"Then, we need to export these providers to make them "),e.TgZ(72,"strong"),e._uU(73,"accessible"),e.qZA(),e._uU(74," for the rest part of the application."),e.qZA(),e.TgZ(75,"span",13),e._uU(76),e.ALo(77,"extension"),e._UZ(78,"app-tabs",null,16),e.qZA(),e.TgZ(80,"pre")(81,"code",11),e._uU(82,"\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n"),e.qZA()(),e.TgZ(83,"p"),e._uU(84,"Now we can inject the "),e.TgZ(85,"code"),e._uU(86,"Connection"),e.qZA(),e._uU(87," object using "),e.TgZ(88,"code"),e._uU(89,"@Inject()"),e.qZA(),e._uU(90," decorator. Each class that would depend on the "),e.TgZ(91,"code"),e._uU(92,"Connection"),e.qZA(),e._uU(93," async provider will wait until a "),e.TgZ(94,"code"),e._uU(95,"Promise"),e.qZA(),e._uU(96," is resolved."),e.qZA(),e.TgZ(97,"h4",17)(98,"span"),e._uU(99,"Model injection"),e.qZA()(),e.TgZ(100,"p"),e._uU(101,"With Mongoose, everything is derived from a "),e.TgZ(102,"a",18),e._uU(103,"Schema"),e.qZA(),e._uU(104,". Let's define the "),e.TgZ(105,"code"),e._uU(106,"CatSchema"),e.qZA(),e._uU(107,":"),e.qZA(),e.TgZ(108,"span",13),e._uU(109),e.ALo(110,"extension"),e._UZ(111,"app-tabs",null,19),e.qZA(),e.TgZ(113,"pre")(114,"code",11),e._uU(115,"\nimport * as mongoose from 'mongoose';\n\nexport const CatSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  breed: String,\n});\n"),e.qZA()(),e.TgZ(116,"p"),e._uU(117,"The "),e.TgZ(118,"code"),e._uU(119,"CatsSchema"),e.qZA(),e._uU(120," belongs to the "),e.TgZ(121,"code"),e._uU(122,"cats"),e.qZA(),e._uU(123," directory. This directory represents the "),e.TgZ(124,"code"),e._uU(125,"CatsModule"),e.qZA(),e._uU(126,"."),e.qZA(),e.TgZ(127,"p"),e._uU(128,"Now it's time to create a "),e.TgZ(129,"strong"),e._uU(130,"Model"),e.qZA(),e._uU(131," provider:"),e.qZA(),e.TgZ(132,"span",13),e._uU(133),e.ALo(134,"extension"),e._UZ(135,"app-tabs",null,20),e.qZA(),e.TgZ(137,"pre")(138,"code",11),e._uU(139,"\nimport { Connection } from 'mongoose';\nimport { CatSchema } from './schemas/cat.schema';\n\nexport const catsProviders = [\n  {\n    provide: 'CAT_MODEL',\n    useFactory: (connection: Connection) => connection.model('Cat', CatSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n];\n"),e.qZA()(),e.TgZ(140,"pre")(141,"code",11),e._uU(142,"\nimport { CatSchema } from './schemas/cat.schema';\n\nexport const catsProviders = [\n  {\n    provide: 'CAT_MODEL',\n    useFactory: (connection) => connection.model('Cat', CatSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n];\n"),e.qZA()(),e.TgZ(143,"blockquote",21)(144,"strong"),e._uU(145,"Warning"),e.qZA(),e._uU(146," In the real-world applications you should avoid "),e.TgZ(147,"strong"),e._uU(148,"magic strings"),e.qZA(),e._uU(149,". Both "),e.TgZ(150,"code"),e._uU(151,"CAT_MODEL"),e.qZA(),e._uU(152," and "),e.TgZ(153,"code"),e._uU(154,"DATABASE_CONNECTION"),e.qZA(),e._uU(155," should be kept in the separated "),e.TgZ(156,"code"),e._uU(157,"constants.ts"),e.qZA(),e._uU(158," file.\n"),e.qZA(),e.TgZ(159,"p"),e._uU(160,"Now we can inject the "),e.TgZ(161,"code"),e._uU(162,"CAT_MODEL"),e.qZA(),e._uU(163," to the "),e.TgZ(164,"code"),e._uU(165,"CatsService"),e.qZA(),e._uU(166," using the "),e.TgZ(167,"code"),e._uU(168,"@Inject()"),e.qZA(),e._uU(169," decorator:"),e.qZA(),e.TgZ(170,"span",13),e._uU(171),e.ALo(172,"extension"),e._UZ(173,"app-tabs",null,22),e.qZA(),e.TgZ(175,"pre")(176,"code",11),e._uU(177,"\nimport { Model } from 'mongoose';\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\nimport { CreateCatDto } from './dto/create-cat.dto';\n\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject('CAT_MODEL')\n    private catModel: Model<Cat>,\n  ) {}\n\n  async create(createCatDto: CreateCatDto): Promise<Cat> {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll(): Promise<Cat[]> {\n    return this.catModel.find().exec();\n  }\n}\n"),e.qZA()(),e.TgZ(178,"pre")(179,"code",11),e._uU(180,"\nimport { Injectable, Dependencies } from '@nestjs/common';\n\n@Injectable()\n@Dependencies('CAT_MODEL')\nexport class CatsService {\n  constructor(catModel) {\n    this.catModel = catModel;\n  }\n\n  async create(createCatDto) {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll() {\n    return this.catModel.find().exec();\n  }\n}\n"),e.qZA()(),e.TgZ(181,"p"),e._uU(182,"In the above example we have used the "),e.TgZ(183,"code"),e._uU(184,"Cat"),e.qZA(),e._uU(185," interface. This interface extends the "),e.TgZ(186,"code"),e._uU(187,"Document"),e.qZA(),e._uU(188," from the mongoose package:"),e.qZA(),e.TgZ(189,"pre")(190,"code",11),e._uU(191,"\nimport { Document } from 'mongoose';\n\nexport interface Cat extends Document {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n"),e.qZA()(),e.TgZ(192,"p"),e._uU(193,"The database connection is "),e.TgZ(194,"strong"),e._uU(195,"asynchronous"),e.qZA(),e._uU(196,", but Nest makes this process completely invisible for the end-user. The "),e.TgZ(197,"code"),e._uU(198,"CatModel"),e.qZA(),e._uU(199," class is waiting for the db connection, and the "),e.TgZ(200,"code"),e._uU(201,"CatsService"),e.qZA(),e._uU(202," is delayed until model is ready to use. The entire application can start when each class is instantiated."),e.qZA(),e.TgZ(203,"p"),e._uU(204,"Here is a final "),e.TgZ(205,"code"),e._uU(206,"CatsModule"),e.qZA(),e._uU(207,":"),e.qZA(),e.TgZ(208,"span",13),e._uU(209),e.ALo(210,"extension"),e._UZ(211,"app-tabs",null,23),e.qZA(),e.TgZ(213,"pre")(214,"code",11),e._uU(215,"\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { catsProviders } from './cats.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n})\nexport class CatsModule {}\n"),e.qZA()(),e.TgZ(216,"blockquote",15)(217,"strong"),e._uU(218,"Hint"),e.qZA(),e._uU(219," Do not forget to import the "),e.TgZ(220,"code"),e._uU(221,"CatsModule"),e.qZA(),e._uU(222," into the root "),e.TgZ(223,"code"),e._uU(224,"AppModule"),e.qZA(),e._uU(225,".\n"),e.qZA()()),2&o){const r=e.MAs(56),c=e.MAs(79),l=e.MAs(112),d=e.MAs(136),s=e.MAs(174),h=e.MAs(212);e.xp6(53),e.hij(" ",e.xi3(54,18,"database.providers",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(16),e.hij(" ",e.xi3(77,21,"database.module",c.isJsActive),"\n"),e.xp6(33),e.hij(" ",e.xi3(110,24,"schemas/cat.schema",l.isJsActive),"\n"),e.xp6(24),e.hij(" ",e.xi3(134,27,"cats.providers",d.isJsActive),"\n"),e.xp6(4),e.ekj("hide",d.isJsActive),e.xp6(3),e.ekj("hide",!d.isJsActive),e.xp6(31),e.hij(" ",e.xi3(172,30,"cats.service",s.isJsActive),"\n"),e.xp6(4),e.ekj("hide",s.isJsActive),e.xp6(3),e.ekj("hide",!s.isJsActive),e.xp6(31),e.hij(" ",e.xi3(210,33,"cats.module",h.isJsActive),"\n")}},dependencies:[Z.n,u.U,g.yS,m.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"MongoDB (Mongoose)"}},{path:"sql-sequelize",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-sql-sequelize"]],features:[e.qOj],decls:203,vars:20,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/sql-sequelize.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","sql-sequelize"],["id","this-chapter-applies-only-to-typescript"],[1,""],["href","/techniques/database#sequelize-integration"],["rel","nofollow","target","_blank","href","https://github.com/sequelize/sequelize"],["rel","nofollow","target","_blank","href","https://github.com/RobinBuschmann/sequelize-typescript"],["appAnchor","","id","getting-started"],[1,"language-bash"],[1,"filename"],["appd2a91d9d8e8e6cb0c90017dc8267784dae73e1ce",""],[1,"language-typescript"],[1,"info"],["appAnchor","","id","model-injection"],["app7046a2cf197286ec31dc0dd38faf5641ed256b32",""],["appba379baf43a24a34d16be7733333bf50fd3082ae",""],[1,"warning"],["app193337958c637a5aec88d0dedb47e43701af4095",""],["app7fa0b7cc1d2531d608469eb8e3f85e1d2255e33e",""]],template:function(o,a){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"SQL (Sequelize)"),e.qZA(),e.TgZ(7,"h5",6),e._uU(8,"This chapter applies only to TypeScript"),e.qZA(),e.TgZ(9,"blockquote",7)(10,"strong"),e._uU(11,"Warning"),e.qZA(),e._uU(12," In this article, you'll learn how to create a "),e.TgZ(13,"code"),e._uU(14,"DatabaseModule"),e.qZA(),e._uU(15," based on the "),e.TgZ(16,"strong"),e._uU(17,"Sequelize"),e.qZA(),e._uU(18," package from scratch using custom components. As a consequence, this technique contains a lot of overhead that you can avoid by using the dedicated, out-of-the-box "),e.TgZ(19,"code"),e._uU(20,"@nestjs/sequelize"),e.qZA(),e._uU(21," package. To learn more, see "),e.TgZ(22,"a",8),e._uU(23,"here"),e.qZA(),e._uU(24,".\n"),e.qZA(),e.TgZ(25,"p")(26,"a",9),e._uU(27,"Sequelize"),e.qZA(),e._uU(28," is a popular Object Relational Mapper (ORM) written in a vanilla JavaScript, but there is a "),e.TgZ(29,"a",10),e._uU(30,"sequelize-typescript"),e.qZA(),e._uU(31," TypeScript wrapper which provides a set of decorators and other extras for the base sequelize."),e.qZA(),e.TgZ(32,"h4",11)(33,"span"),e._uU(34,"Getting started"),e.qZA()(),e.TgZ(35,"p"),e._uU(36,"To start the adventure with this library we have to install the following dependencies:"),e.qZA(),e.TgZ(37,"pre")(38,"code",12),e._uU(39,"\n$ npm install --save sequelize sequelize-typescript mysql2\n$ npm install --save-dev @types/sequelize\n"),e.qZA()(),e.TgZ(40,"p"),e._uU(41,"The first step we need to do is create a "),e.TgZ(42,"strong"),e._uU(43,"Sequelize"),e.qZA(),e._uU(44," instance with an options object passed into the constructor. Also, we need to add all models (the alternative is to use "),e.TgZ(45,"code"),e._uU(46,"modelPaths"),e.qZA(),e._uU(47," property) and "),e.TgZ(48,"code"),e._uU(49,"sync()"),e.qZA(),e._uU(50," our database tables."),e.qZA(),e.TgZ(51,"span",13),e._uU(52),e.ALo(53,"extension"),e._UZ(54,"app-tabs",null,14),e.qZA(),e.TgZ(56,"pre")(57,"code",15),e._uU(58,"\nimport { Sequelize } from 'sequelize-typescript';\nimport { Cat } from '../cats/cat.entity';\n\nexport const databaseProviders = [\n  {\n    provide: 'SEQUELIZE',\n    useFactory: async () => {\n      const sequelize = new Sequelize({\n        dialect: 'mysql',\n        host: 'localhost',\n        port: 3306,\n        username: 'root',\n        password: 'password',\n        database: 'nest',\n      });\n      sequelize.addModels([Cat]);\n      await sequelize.sync();\n      return sequelize;\n    },\n  },\n];\n"),e.qZA()(),e.TgZ(59,"blockquote",16)(60,"strong"),e._uU(61,"Hint"),e.qZA(),e._uU(62," Following best practices, we declared the custom provider in the separated file which has a "),e.TgZ(63,"code"),e._uU(64,"*.providers.ts"),e.qZA(),e._uU(65," suffix.\n"),e.qZA(),e.TgZ(66,"p"),e._uU(67,"Then, we need to export these providers to make them "),e.TgZ(68,"strong"),e._uU(69,"accessible"),e.qZA(),e._uU(70," for the rest part of the application."),e.qZA(),e.TgZ(71,"pre")(72,"code",15),e._uU(73,"\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n"),e.qZA()(),e.TgZ(74,"p"),e._uU(75,"Now we can inject the "),e.TgZ(76,"code"),e._uU(77,"Sequelize"),e.qZA(),e._uU(78," object using "),e.TgZ(79,"code"),e._uU(80,"@Inject()"),e.qZA(),e._uU(81," decorator. Each class that would depend on the "),e.TgZ(82,"code"),e._uU(83,"Sequelize"),e.qZA(),e._uU(84," async provider will wait until a "),e.TgZ(85,"code"),e._uU(86,"Promise"),e.qZA(),e._uU(87," is resolved."),e.qZA(),e.TgZ(88,"h4",17)(89,"span"),e._uU(90,"Model injection"),e.qZA()(),e.TgZ(91,"p"),e._uU(92,"In "),e.TgZ(93,"a",9),e._uU(94,"Sequelize"),e.qZA(),e._uU(95," the "),e.TgZ(96,"strong"),e._uU(97,"Model"),e.qZA(),e._uU(98," defines a table in the database. Instances of this class represent a database row. Firstly, we need at least one entity:"),e.qZA(),e.TgZ(99,"span",13),e._uU(100),e.ALo(101,"extension"),e._UZ(102,"app-tabs",null,18),e.qZA(),e.TgZ(104,"pre")(105,"code",15),e._uU(106,"\nimport { Table, Column, Model } from 'sequelize-typescript';\n\n@Table\nexport class Cat extends Model {\n  @Column\n  name: string;\n\n  @Column\n  age: number;\n\n  @Column\n  breed: string;\n}\n"),e.qZA()(),e.TgZ(107,"p"),e._uU(108,"The "),e.TgZ(109,"code"),e._uU(110,"Cat"),e.qZA(),e._uU(111," entity belongs to the "),e.TgZ(112,"code"),e._uU(113,"cats"),e.qZA(),e._uU(114," directory. This directory represents the "),e.TgZ(115,"code"),e._uU(116,"CatsModule"),e.qZA(),e._uU(117,". Now it's time to create a "),e.TgZ(118,"strong"),e._uU(119,"Repository"),e.qZA(),e._uU(120," provider:"),e.qZA(),e.TgZ(121,"span",13),e._uU(122),e.ALo(123,"extension"),e._UZ(124,"app-tabs",null,19),e.qZA(),e.TgZ(126,"pre")(127,"code",15),e._uU(128,"\nimport { Cat } from './cat.entity';\n\nexport const catsProviders = [\n  {\n    provide: 'CATS_REPOSITORY',\n    useValue: Cat,\n  },\n];\n"),e.qZA()(),e.TgZ(129,"blockquote",20)(130,"strong"),e._uU(131,"Warning"),e.qZA(),e._uU(132," In the real-world applications you should avoid "),e.TgZ(133,"strong"),e._uU(134,"magic strings"),e.qZA(),e._uU(135,". Both "),e.TgZ(136,"code"),e._uU(137,"CATS_REPOSITORY"),e.qZA(),e._uU(138," and "),e.TgZ(139,"code"),e._uU(140,"SEQUELIZE"),e.qZA(),e._uU(141," should be kept in the separated "),e.TgZ(142,"code"),e._uU(143,"constants.ts"),e.qZA(),e._uU(144," file.\n"),e.qZA(),e.TgZ(145,"p"),e._uU(146,"In Sequelize, we use static methods to manipulate the data, and thus we created an "),e.TgZ(147,"strong"),e._uU(148,"alias"),e.qZA(),e._uU(149," here."),e.qZA(),e.TgZ(150,"p"),e._uU(151,"Now we can inject the "),e.TgZ(152,"code"),e._uU(153,"CATS_REPOSITORY"),e.qZA(),e._uU(154," to the "),e.TgZ(155,"code"),e._uU(156,"CatsService"),e.qZA(),e._uU(157," using the "),e.TgZ(158,"code"),e._uU(159,"@Inject()"),e.qZA(),e._uU(160," decorator:"),e.qZA(),e.TgZ(161,"span",13),e._uU(162),e.ALo(163,"extension"),e._UZ(164,"app-tabs",null,21),e.qZA(),e.TgZ(166,"pre")(167,"code",15),e._uU(168,"\nimport { Injectable, Inject } from '@nestjs/common';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './cat.entity';\n\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject('CATS_REPOSITORY')\n    private catsRepository: typeof Cat\n  ) {}\n\n  async findAll(): Promise<Cat[]> {\n    return this.catsRepository.findAll<Cat>();\n  }\n}\n"),e.qZA()(),e.TgZ(169,"p"),e._uU(170,"The database connection is "),e.TgZ(171,"strong"),e._uU(172,"asynchronous"),e.qZA(),e._uU(173,", but Nest makes this process completely invisible for the end-user. The "),e.TgZ(174,"code"),e._uU(175,"CATS_REPOSITORY"),e.qZA(),e._uU(176," provider is waiting for the db connection, and the "),e.TgZ(177,"code"),e._uU(178,"CatsService"),e.qZA(),e._uU(179," is delayed until repository is ready to use. The entire application can start when each class is instantiated."),e.qZA(),e.TgZ(180,"p"),e._uU(181,"Here is a final "),e.TgZ(182,"code"),e._uU(183,"CatsModule"),e.qZA(),e._uU(184,":"),e.qZA(),e.TgZ(185,"span",13),e._uU(186),e.ALo(187,"extension"),e._UZ(188,"app-tabs",null,22),e.qZA(),e.TgZ(190,"pre")(191,"code",15),e._uU(192,"\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { catsProviders } from './cats.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n})\nexport class CatsModule {}\n"),e.qZA()(),e.TgZ(193,"blockquote",16)(194,"strong"),e._uU(195,"Hint"),e.qZA(),e._uU(196," Do not forget to import the "),e.TgZ(197,"code"),e._uU(198,"CatsModule"),e.qZA(),e._uU(199," into the root "),e.TgZ(200,"code"),e._uU(201,"AppModule"),e.qZA(),e._uU(202,".\n"),e.qZA()()),2&o){const r=e.MAs(55),c=e.MAs(103),l=e.MAs(125),d=e.MAs(165),s=e.MAs(189);e.xp6(52),e.hij(" ",e.xi3(53,5,"database.providers",r.isJsActive),"\n"),e.xp6(48),e.hij(" ",e.xi3(101,8,"cat.entity",c.isJsActive),"\n"),e.xp6(22),e.hij(" ",e.xi3(123,11,"cats.providers",l.isJsActive),"\n"),e.xp6(40),e.hij(" ",e.xi3(163,14,"cats.service",d.isJsActive),"\n"),e.xp6(24),e.hij(" ",e.xi3(187,17,"cats.module",s.isJsActive),"\n")}},dependencies:[Z.n,u.U,m.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"SQL (Sequelize)"}},{path:"cqrs",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cqrs"]],features:[e.qOj],decls:329,vars:64,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/cqrs.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cqrs"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/cqrs"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","commands"],[1,"filename"],["app44d6ecd27ffebbf019d90a07ab1f8f98e00a206a",""],[1,"language-typescript"],["app40ea649b8c019466e8177a4db6b8f9c70af58a13",""],["app2dbf17642216763cb196820103b0562cafe8a68c",""],["appAnchor","","id","events"],["appff6a5ed96a284b41d712eafd278099f285577daf",""],["appf363f6dfecc6f5663b860ea504a0b2b6476ad21d",""],["app64558157df024c56a25aa9604a27e6117136fad0",""],[1,"info"],["app780af3ea9440605c94d1099ed5b090de1fa2a28b",""],["appAnchor","","id","sagas"],["rel","nofollow","target","_blank","href","https://github.com/ReactiveX/rxjs"],["app15266f5ed1e1e7fea1628e6e385289989a34836f",""],["appAnchor","","id","queries"],["appAnchor","","id","setup"],["appccb8db83aa35336411c7a8792b83c5987bbb9587",""],["appAnchor","","id","summary"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/kamilmysliwiec/nest-cqrs-example"]],template:function(o,a){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"CQRS"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"The flow of simple "),e.TgZ(9,"a",6),e._uU(10,"CRUD"),e.qZA(),e._uU(11," (Create, Read, Update and Delete) applications can be described using the following steps:"),e.qZA(),e.TgZ(12,"ol")(13,"li"),e._uU(14,"The "),e.TgZ(15,"strong"),e._uU(16,"controllers"),e.qZA(),e._uU(17," layer handles HTTP requests and delegates tasks to the services layer."),e.qZA(),e.TgZ(18,"li"),e._uU(19,"The "),e.TgZ(20,"strong"),e._uU(21,"services layer"),e.qZA(),e._uU(22," is where most of the business logic lives."),e.qZA(),e.TgZ(23,"li"),e._uU(24,"Services use "),e.TgZ(25,"strong"),e._uU(26,"repositories / DAOs"),e.qZA(),e._uU(27," to change / persist entities."),e.qZA(),e.TgZ(28,"li"),e._uU(29,"Entities act as containers for the values, with setters and getters."),e.qZA()(),e.TgZ(30,"p"),e._uU(31,"In most cases, for small and medium-sized applications, this pattern is sufficient. However, when our requirements become more complex, the "),e.TgZ(32,"strong"),e._uU(33,"CQRS"),e.qZA(),e._uU(34," model may be more appropriate and scalable. To facilitate that model, Nest provides a lightweight "),e.TgZ(35,"a",7),e._uU(36,"CQRS module"),e.qZA(),e._uU(37,". This chapter describes how to use it."),e.qZA(),e.TgZ(38,"h4",8)(39,"span"),e._uU(40,"Installation"),e.qZA()(),e.TgZ(41,"p"),e._uU(42,"First install the required package:"),e.qZA(),e.TgZ(43,"pre")(44,"code",9),e._uU(45,"\n$ npm install --save @nestjs/cqrs\n"),e.qZA()(),e.TgZ(46,"h4",10)(47,"span"),e._uU(48,"Commands"),e.qZA()(),e.TgZ(49,"p"),e._uU(50,"In this model, each action is called a "),e.TgZ(51,"strong"),e._uU(52,"Command"),e.qZA(),e._uU(53,". When a command is dispatched, the application reacts to it. Commands can be dispatched from the services layer, or directly from controllers/gateways. Commands are consumed by "),e.TgZ(54,"strong"),e._uU(55,"Command Handlers"),e.qZA(),e._uU(56,"."),e.qZA(),e.TgZ(57,"span",11),e._uU(58),e.ALo(59,"extension"),e._UZ(60,"app-tabs",null,12),e.qZA(),e.TgZ(62,"pre")(63,"code",13),e._uU(64,"\n@Injectable()\nexport class HeroesGameService {\n  constructor(private commandBus: CommandBus) {}\n\n  async killDragon(heroId: string, killDragonDto: KillDragonDto) {\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  }\n}\n"),e.qZA()(),e.TgZ(65,"pre")(66,"code",13),e._uU(67,"\n@Injectable()\n@Dependencies(CommandBus)\nexport class HeroesGameService {\n  constructor(commandBus) {\n    this.commandBus = commandBus;\n  }\n\n  async killDragon(heroId, killDragonDto) {\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  }\n}\n"),e.qZA()(),e.TgZ(68,"p"),e._uU(69,"Here's a sample service that dispatches "),e.TgZ(70,"code"),e._uU(71,"KillDragonCommand"),e.qZA(),e._uU(72,". Let's see how the command looks:"),e.qZA(),e.TgZ(73,"span",11),e._uU(74),e.ALo(75,"extension"),e._UZ(76,"app-tabs",null,14),e.qZA(),e.TgZ(78,"pre")(79,"code",13),e._uU(80,"\nexport class KillDragonCommand {\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(81,"pre")(82,"code",13),e._uU(83,"\nexport class KillDragonCommand {\n  constructor(heroId, dragonId) {\n    this.heroId = heroId;\n    this.dragonId = dragonId;\n  }\n}\n"),e.qZA()(),e.TgZ(84,"p"),e._uU(85,"The "),e.TgZ(86,"code"),e._uU(87,"CommandBus"),e.qZA(),e._uU(88," is a "),e.TgZ(89,"strong"),e._uU(90,"stream"),e.qZA(),e._uU(91," of commands. It delegates commands to the equivalent handlers. Each command must have a corresponding "),e.TgZ(92,"strong"),e._uU(93,"Command Handler"),e.qZA(),e._uU(94,":"),e.qZA(),e.TgZ(95,"span",11),e._uU(96),e.ALo(97,"extension"),e._UZ(98,"app-tabs",null,15),e.qZA(),e.TgZ(100,"pre")(101,"code",13),e._uU(102,"\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler<KillDragonCommand> {\n  constructor(private repository: HeroRepository) {}\n\n  async execute(command: KillDragonCommand) {\n    const { heroId, dragonId } = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n  }\n}\n"),e.qZA()(),e.TgZ(103,"pre")(104,"code",13),e._uU(105,"\n@CommandHandler(KillDragonCommand)\n@Dependencies(HeroRepository)\nexport class KillDragonHandler {\n  constructor(repository) {\n    this.repository = repository;\n  }\n\n  async execute(command) {\n    const { heroId, dragonId } = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n  }\n}\n"),e.qZA()(),e.TgZ(106,"p"),e._uU(107,"With this approach, every application state change is driven by the occurrence of a "),e.TgZ(108,"strong"),e._uU(109,"Command"),e.qZA(),e._uU(110,". The logic is encapsulated in handlers. With this approach, we can simply add behavior like logging or persisting commands in the database (e.g., for diagnostics purposes)."),e.qZA(),e.TgZ(111,"h4",16)(112,"span"),e._uU(113,"Events"),e.qZA()(),e.TgZ(114,"p"),e._uU(115,"Command handlers neatly encapsulate logic. While beneficial, the application structure is still not flexible enough, not "),e.TgZ(116,"strong"),e._uU(117,"reactive"),e.qZA(),e._uU(118,". To remedy this, we also introduce "),e.TgZ(119,"strong"),e._uU(120,"events"),e.qZA(),e._uU(121,"."),e.qZA(),e.TgZ(122,"span",11),e._uU(123),e.ALo(124,"extension"),e._UZ(125,"app-tabs",null,17),e.qZA(),e.TgZ(127,"pre")(128,"code",13),e._uU(129,"\nexport class HeroKilledDragonEvent {\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(130,"pre")(131,"code",13),e._uU(132,"\nexport class HeroKilledDragonEvent {\n  constructor(heroId, dragonId) {\n    this.heroId = heroId;\n    this.dragonId = dragonId;\n  }\n}\n"),e.qZA()(),e.TgZ(133,"p"),e._uU(134,"Events are asynchronous. They are dispatched either by "),e.TgZ(135,"strong"),e._uU(136,"models"),e.qZA(),e._uU(137," or directly using "),e.TgZ(138,"code"),e._uU(139,"EventBus"),e.qZA(),e._uU(140,". In order to dispatch events, models have to extend the "),e.TgZ(141,"code"),e._uU(142,"AggregateRoot"),e.qZA(),e._uU(143," class."),e.qZA(),e.TgZ(144,"span",11),e._uU(145),e.ALo(146,"extension"),e._UZ(147,"app-tabs",null,18),e.qZA(),e.TgZ(149,"pre")(150,"code",13),e._uU(151,"\nexport class Hero extends AggregateRoot {\n  constructor(private id: string) {\n    super();\n  }\n\n  killEnemy(enemyId: string) {\n    // logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  }\n}\n"),e.qZA()(),e.TgZ(152,"pre")(153,"code",13),e._uU(154,"\nexport class Hero extends AggregateRoot {\n  constructor(id) {\n    super();\n    this.id = id;\n  }\n\n  killEnemy(enemyId) {\n    // logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  }\n}\n"),e.qZA()(),e.TgZ(155,"p"),e._uU(156,"The "),e.TgZ(157,"code"),e._uU(158,"apply()"),e.qZA(),e._uU(159," method does not dispatch events yet because there's no relationship between the model and the "),e.TgZ(160,"code"),e._uU(161,"EventPublisher"),e.qZA(),e._uU(162," class. How do we associate the model and the publisher? By using a publisher "),e.TgZ(163,"code"),e._uU(164,"mergeObjectContext()"),e.qZA(),e._uU(165," method inside our command handler."),e.qZA(),e.TgZ(166,"span",11),e._uU(167),e.ALo(168,"extension"),e._UZ(169,"app-tabs",null,19),e.qZA(),e.TgZ(171,"pre")(172,"code",13),e._uU(173,"\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler<KillDragonCommand> {\n  constructor(\n    private repository: HeroRepository,\n    private publisher: EventPublisher,\n  ) {}\n\n  async execute(command: KillDragonCommand) {\n    const { heroId, dragonId } = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  }\n}\n"),e.qZA()(),e.TgZ(174,"pre")(175,"code",13),e._uU(176,"\n@CommandHandler(KillDragonCommand)\n@Dependencies(HeroRepository, EventPublisher)\nexport class KillDragonHandler {\n  constructor(repository, publisher) {\n    this.repository = repository;\n    this.publisher = publisher;\n  }\n\n  async execute(command) {\n    const { heroId, dragonId } = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  }\n}\n"),e.qZA()(),e.TgZ(177,"p"),e._uU(178,"Now everything works as expected. Notice that we need to "),e.TgZ(179,"code"),e._uU(180,"commit()"),e.qZA(),e._uU(181," events since they're not being dispatched immediately. Obviously, an object doesn't have to exist up front. We can easily merge type context as well:"),e.qZA(),e.TgZ(182,"pre")(183,"code",13),e._uU(184,"\nconst HeroModel = this.publisher.mergeClassContext(Hero);\nnew HeroModel('id');\n"),e.qZA()(),e.TgZ(185,"p"),e._uU(186,"Now the model has the ability to publish events. Additionally, we can emit events manually using "),e.TgZ(187,"code"),e._uU(188,"EventBus"),e.qZA(),e._uU(189,":"),e.qZA(),e.TgZ(190,"pre")(191,"code",13),e._uU(192,"\nthis.eventBus.publish(new HeroKilledDragonEvent());\n"),e.qZA()(),e.TgZ(193,"blockquote",20)(194,"strong"),e._uU(195,"Hint"),e.qZA(),e._uU(196," The "),e.TgZ(197,"code"),e._uU(198,"EventBus"),e.qZA(),e._uU(199," is an injectable class.\n"),e.qZA(),e.TgZ(200,"p"),e._uU(201,"Each event can have multiple "),e.TgZ(202,"strong"),e._uU(203,"Event Handlers"),e.qZA(),e._uU(204,"."),e.qZA(),e.TgZ(205,"span",11),e._uU(206),e.ALo(207,"extension"),e._UZ(208,"app-tabs",null,21),e.qZA(),e.TgZ(210,"pre")(211,"code",13),e._uU(212,"\n@EventsHandler(HeroKilledDragonEvent)\nexport class HeroKilledDragonHandler implements IEventHandler<HeroKilledDragonEvent> {\n  constructor(private repository: HeroRepository) {}\n\n  handle(event: HeroKilledDragonEvent) {\n    // logic\n  }\n}\n"),e.qZA()(),e.TgZ(213,"p"),e._uU(214,"Now we can move the "),e.TgZ(215,"strong"),e._uU(216,"write logic"),e.qZA(),e._uU(217," into the event handlers."),e.qZA(),e.TgZ(218,"h4",22)(219,"span"),e._uU(220,"Sagas"),e.qZA()(),e.TgZ(221,"p"),e._uU(222,"This type of "),e.TgZ(223,"strong"),e._uU(224,"Event-Driven Architecture"),e.qZA(),e._uU(225," improves application "),e.TgZ(226,"strong"),e._uU(227,"reactiveness and scalability"),e.qZA(),e._uU(228,". Now, when we have events, we can simply react to them in various ways. "),e.TgZ(229,"strong"),e._uU(230,"Sagas"),e.qZA(),e._uU(231," are the final building block from an architectural point of view."),e.qZA(),e.TgZ(232,"p"),e._uU(233,"Sagas are an extremely powerful feature. A single saga may listen for 1..* events. Using the "),e.TgZ(234,"a",23),e._uU(235,"RxJS"),e.qZA(),e._uU(236," library, it can combine, merge, filter or apply other "),e.TgZ(237,"code"),e._uU(238,"RxJS"),e.qZA(),e._uU(239," operators on the event stream. Each saga returns an Observable which contains a command. This command is dispatched "),e.TgZ(240,"strong"),e._uU(241,"asynchronously"),e.qZA(),e._uU(242,"."),e.qZA(),e.TgZ(243,"span",11),e._uU(244),e.ALo(245,"extension"),e._UZ(246,"app-tabs",null,24),e.qZA(),e.TgZ(248,"pre")(249,"code",13),e._uU(250,"\n@Injectable()\nexport class HeroesGameSagas {\n  @Saga()\n  dragonKilled = (events$: Observable<any>): Observable<ICommand> => {\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) => new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  }\n}\n"),e.qZA()(),e.TgZ(251,"pre")(252,"code",13),e._uU(253,"\n@Injectable()\nexport class HeroesGameSagas {\n  @Saga()\n  dragonKilled = (events$) => {\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) => new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  }\n}\n"),e.qZA()(),e.TgZ(254,"blockquote",20)(255,"strong"),e._uU(256,"Hint"),e.qZA(),e._uU(257," The "),e.TgZ(258,"code"),e._uU(259,"ofType"),e.qZA(),e._uU(260," operator is exported from the "),e.TgZ(261,"code"),e._uU(262,"@nestjs/cqrs"),e.qZA(),e._uU(263," package.\n"),e.qZA(),e.TgZ(264,"p"),e._uU(265,"We declared a rule - when any hero kills the dragon, the ancient item should be dropped. With this in place, "),e.TgZ(266,"code"),e._uU(267,"DropAncientItemCommand"),e.qZA(),e._uU(268," will be dispatched and processed by the appropriate handler."),e.qZA(),e.TgZ(269,"h4",25)(270,"span"),e._uU(271,"Queries"),e.qZA()(),e.TgZ(272,"p"),e._uU(273,"The "),e.TgZ(274,"code"),e._uU(275,"CqrsModule"),e.qZA(),e._uU(276," can also be used for handling queries. The "),e.TgZ(277,"code"),e._uU(278,"QueryBus"),e.qZA(),e._uU(279," follows the same pattern as the "),e.TgZ(280,"code"),e._uU(281,"CommandsBus"),e.qZA(),e._uU(282,". Query handlers should implement the "),e.TgZ(283,"code"),e._uU(284,"IQueryHandler"),e.qZA(),e._uU(285," interface and be marked with the "),e.TgZ(286,"code"),e._uU(287,"@QueryHandler()"),e.qZA(),e._uU(288," decorator."),e.qZA(),e.TgZ(289,"h4",26)(290,"span"),e._uU(291,"Setup"),e.qZA()(),e.TgZ(292,"p"),e._uU(293,"Finally, let's look at how to set up the whole CQRS mechanism."),e.qZA(),e.TgZ(294,"span",11),e._uU(295),e.ALo(296,"extension"),e._UZ(297,"app-tabs",null,27),e.qZA(),e.TgZ(299,"pre")(300,"code",13),e._uU(301,"\nexport const CommandHandlers = [KillDragonHandler, DropAncientItemHandler];\nexport const EventHandlers =  [HeroKilledDragonHandler, HeroFoundItemHandler];\n\n@Module({\n  imports: [CqrsModule],\n  controllers: [HeroesGameController],\n  providers: [\n    HeroesGameService,\n    HeroesGameSagas,\n    ...CommandHandlers,\n    ...EventHandlers,\n    HeroRepository,\n  ]\n})\nexport class HeroesGameModule {}\n"),e.qZA()(),e.TgZ(302,"h4",28)(303,"span"),e._uU(304,"Summary"),e.qZA()(),e.TgZ(305,"p")(306,"code"),e._uU(307,"CommandBus"),e.qZA(),e._uU(308,", "),e.TgZ(309,"code"),e._uU(310,"QueryBus"),e.qZA(),e._uU(311," and "),e.TgZ(312,"code"),e._uU(313,"EventBus"),e.qZA(),e._uU(314," are "),e.TgZ(315,"strong"),e._uU(316,"Observables"),e.qZA(),e._uU(317,". This means that you can easily subscribe to the whole stream and enrich your application with "),e.TgZ(318,"strong"),e._uU(319,"Event Sourcing"),e.qZA(),e._uU(320,"."),e.qZA(),e.TgZ(321,"h4",29)(322,"span"),e._uU(323,"Example"),e.qZA()(),e.TgZ(324,"p"),e._uU(325,"A working example is available "),e.TgZ(326,"a",30),e._uU(327,"here"),e.qZA(),e._uU(328,"."),e.qZA()()),2&o){const r=e.MAs(61),c=e.MAs(77),l=e.MAs(99),d=e.MAs(126),s=e.MAs(148),h=e.MAs(170),_=e.MAs(209),U=e.MAs(247),A=e.MAs(298);e.xp6(58),e.hij(" ",e.xi3(59,37,"heroes-game.service",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(9),e.hij(" ",e.xi3(75,40,"kill-dragon.command",c.isJsActive),"\n"),e.xp6(4),e.ekj("hide",c.isJsActive),e.xp6(3),e.ekj("hide",!c.isJsActive),e.xp6(15),e.hij(" ",e.xi3(97,43,"kill-dragon.handler",l.isJsActive),"\n"),e.xp6(4),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(20),e.hij(" ",e.xi3(124,46,"hero-killed-dragon.event",d.isJsActive),"\n"),e.xp6(4),e.ekj("hide",d.isJsActive),e.xp6(3),e.ekj("hide",!d.isJsActive),e.xp6(15),e.hij(" ",e.xi3(146,49,"hero.model",s.isJsActive),"\n"),e.xp6(4),e.ekj("hide",s.isJsActive),e.xp6(3),e.ekj("hide",!s.isJsActive),e.xp6(15),e.hij(" ",e.xi3(168,52,"kill-dragon.handler",h.isJsActive),"\n"),e.xp6(4),e.ekj("hide",h.isJsActive),e.xp6(3),e.ekj("hide",!h.isJsActive),e.xp6(32),e.hij(" ",e.xi3(207,55,"hero-killed-dragon.handler",_.isJsActive),"\n"),e.xp6(38),e.hij(" ",e.xi3(245,58,"heroes-game.saga",U.isJsActive),"\n"),e.xp6(4),e.ekj("hide",U.isJsActive),e.xp6(3),e.ekj("hide",!U.isJsActive),e.xp6(44),e.hij(" ",e.xi3(296,61,"heroes-game.module",A.isJsActive),"\n")}},dependencies:[Z.n,u.U,m.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"CQRS"}},{path:"swagger",redirectTo:"/openapi/introduction"},{path:"prisma",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-prisma"]],features:[e.qOj],decls:620,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/prisma.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","prisma"],["rel","nofollow","target","_blank","href","https://www.prisma.io"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma"],["rel","nofollow","target","_blank","href","https://knexjs.org/"],["rel","nofollow","target","_blank","href","https://typeorm.io/"],["rel","nofollow","target","_blank","href","https://sequelize.org/"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/database-reference/supported-databases"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/concepts/more/comparisons/prisma-and-typeorm#type-safety"],[1,"info"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/getting-started/quickstart"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/understand-prisma/introduction"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma-examples/tree/latest/typescript/rest-nestjs"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma-examples/tree/latest/typescript/graphql-nestjs"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma-examples/"],["appAnchor","","id","getting-started"],["rel","nofollow","target","_blank","href","https://sqlite.org/"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project-typescript-postgres"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/guides/migrate-to-prisma/migrate-from-typeorm"],["appAnchor","","id","create-your-nestjs-project"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/first-steps"],["appAnchor","","id","set-up-prisma"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-cli"],["rel","nofollow","target","_blank","href","https://github.com/motdotla/dotenv"],["appAnchor","","id","set-the-database-connection"],[1,"language-groovy"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/database-reference/connection-urls"],["rel","nofollow","target","_blank","href","https://dev.to/prisma/how-to-setup-a-free-postgresql-database-on-heroku-1dc1"],["appAnchor","","id","create-two-database-tables-with-prisma-migrate"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/concepts/components/prisma-migrate"],[1,"language-sql"],["appAnchor","","id","install-and-generate-prisma-client"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/concepts/components/prisma-client/crud"],["appAnchor","","id","use-prisma-client-in-your-nestjs-services"],["rel","nofollow","target","_blank","href","https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud"],[1,"language-typescript"],["href","recipes/prisma#issues-with-enableshutdownhooks"],["id","implement-your-rest-api-routes-in-the-main-app-controller"],["id","get"],["id","post"],["id","put"],["id","delete"],["appAnchor","","id","issues-with-enableshutdownhooks"],["rel","nofollow","target","_blank","href","https://github.com/prisma/prisma/issues/2917#issuecomment-708340112"],["appAnchor","","id","summary"],["rel","nofollow","target","_blank","href","https://www.prisma.io/nestjs"],["rel","nofollow","target","_blank","href","https://github.com/notiz-dev/nestjs-prisma-starter#instructions"],["rel","nofollow","target","_blank","href","https://www.youtube.com/watch?v=UlVJ340UEuk&ab_channel=Prisma"],["rel","nofollow","target","_blank","href","https://github.com/marcjulian"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Prisma"),e.qZA(),e.TgZ(7,"p")(8,"a",6),e._uU(9,"Prisma"),e.qZA(),e._uU(10," is an "),e.TgZ(11,"a",7),e._uU(12,"open-source"),e.qZA(),e._uU(13," ORM for Node.js and TypeScript. It is used as an "),e.TgZ(14,"strong"),e._uU(15,"alternative"),e.qZA(),e._uU(16," to writing plain SQL, or using another database access tool such as SQL query builders (like "),e.TgZ(17,"a",8),e._uU(18,"knex.js"),e.qZA(),e._uU(19,") or ORMs (like "),e.TgZ(20,"a",9),e._uU(21,"TypeORM"),e.qZA(),e._uU(22," and "),e.TgZ(23,"a",10),e._uU(24,"Sequelize"),e.qZA(),e._uU(25,"). Prisma currently supports PostgreSQL, MySQL, SQL Server, SQLite, MongoDB and CockroachDB ("),e.TgZ(26,"a",11),e._uU(27,"Preview"),e.qZA(),e._uU(28,")."),e.qZA(),e.TgZ(29,"p"),e._uU(30,"While Prisma can be used with plain JavaScript, it embraces TypeScript and provides a level to type-safety that goes beyond the guarantees other ORMs in the TypeScript ecosystem. You can find an in-depth comparison of the type-safety guarantees of Prisma and TypeORM "),e.TgZ(31,"a",12),e._uU(32,"here"),e.qZA(),e._uU(33,"."),e.qZA(),e.TgZ(34,"blockquote",13)(35,"strong"),e._uU(36,"Note"),e.qZA(),e._uU(37," If you want to get a quick overview of how Prisma works, you can follow the "),e.TgZ(38,"a",14),e._uU(39,"Quickstart"),e.qZA(),e._uU(40," or read the "),e.TgZ(41,"a",15),e._uU(42,"Introduction"),e.qZA(),e._uU(43," in the "),e.TgZ(44,"a",16),e._uU(45,"documentation"),e.qZA(),e._uU(46,". There also are ready-to-run examples for "),e.TgZ(47,"a",17),e._uU(48,"REST"),e.qZA(),e._uU(49," and "),e.TgZ(50,"a",18),e._uU(51,"GraphQL"),e.qZA(),e._uU(52," in the "),e.TgZ(53,"a",19)(54,"code"),e._uU(55,"prisma-examples"),e.qZA()(),e._uU(56," repo.\n"),e.qZA(),e.TgZ(57,"h4",20)(58,"span"),e._uU(59,"Getting started"),e.qZA()(),e.TgZ(60,"p"),e._uU(61,"In this recipe, you'll learn how to get started with NestJS and Prisma from scratch. You are going to build a sample NestJS application with a REST API that can read and write data in a database."),e.qZA(),e.TgZ(62,"p"),e._uU(63,"For the purpose of this guide, you'll use a "),e.TgZ(64,"a",21),e._uU(65,"SQLite"),e.qZA(),e._uU(66," database to save the overhead of setting up a database server. Note that you can still follow this guide, even if you're using PostgreSQL or MySQL \u2013 you'll get extra instructions for using these databases at the right places."),e.qZA(),e.TgZ(67,"blockquote",13)(68,"strong"),e._uU(69,"Note"),e.qZA(),e._uU(70," If you already have an existing project and consider migrating to Prisma, you can follow the guide for "),e.TgZ(71,"a",22),e._uU(72,"adding Prisma to an existing project"),e.qZA(),e._uU(73,". If you are migrating from TypeORM, you can read the guide "),e.TgZ(74,"a",23),e._uU(75,"Migrating from TypeORM to Prisma"),e.qZA(),e._uU(76,".\n"),e.qZA(),e.TgZ(77,"h4",24)(78,"span"),e._uU(79,"Create your NestJS project"),e.qZA()(),e.TgZ(80,"p"),e._uU(81,"To get started, install the NestJS CLI and create your app skeleton with the following commands:"),e.qZA(),e.TgZ(82,"pre")(83,"code",25),e._uU(84,"\n$ npm install -g @nestjs/cli\n$ nest new hello-prisma\n"),e.qZA()(),e.TgZ(85,"p"),e._uU(86,"See the "),e.TgZ(87,"a",26),e._uU(88,"First steps"),e.qZA(),e._uU(89," page to learn more about the project files created by this command. Note also that you can now run "),e.TgZ(90,"code"),e._uU(91,"npm start"),e.qZA(),e._uU(92," to start your application. The REST API running at "),e.TgZ(93,"code"),e._uU(94,"http://localhost:3000/"),e.qZA(),e._uU(95," currently serves a single route that's implemented in "),e.TgZ(96,"code"),e._uU(97,"src/app.controller.ts"),e.qZA(),e._uU(98,". Over the course of this guide, you'll implement additional routes to store and retrieve data about "),e.TgZ(99,"em"),e._uU(100,"users"),e.qZA(),e._uU(101," and "),e.TgZ(102,"em"),e._uU(103,"posts"),e.qZA(),e._uU(104,"."),e.qZA(),e.TgZ(105,"h4",27)(106,"span"),e._uU(107,"Set up Prisma"),e.qZA()(),e.TgZ(108,"p"),e._uU(109,"Start by installing the Prisma CLI as a development dependency in your project:"),e.qZA(),e.TgZ(110,"pre")(111,"code",25),e._uU(112,"\n$ cd hello-prisma\n$ npm install prisma --save-dev\n"),e.qZA()(),e.TgZ(113,"p"),e._uU(114,"In the following steps, we'll be utilizing the "),e.TgZ(115,"a",28),e._uU(116,"Prisma CLI"),e.qZA(),e._uU(117,". As a best practice, it's recommended to invoke the CLI locally by prefixing it with "),e.TgZ(118,"code"),e._uU(119,"npx"),e.qZA(),e._uU(120,":"),e.qZA(),e.TgZ(121,"pre")(122,"code",25),e._uU(123,"\n$ npx prisma\n"),e.qZA()(),e.TgZ(124,"details")(125,"summary"),e._uU(126,"Expand if you're using Yarn"),e.qZA(),e.TgZ(127,"p"),e._uU(128,"If you're using Yarn, then you can install the Prisma CLI as follows:"),e.qZA(),e.TgZ(129,"pre")(130,"code",25),e._uU(131,"\n$ yarn add prisma --dev\n"),e.qZA()(),e.TgZ(132,"p"),e._uU(133,"Once installed, you can invoke it by prefixing it with "),e.TgZ(134,"code"),e._uU(135,"yarn"),e.qZA(),e._uU(136,":"),e.qZA(),e.TgZ(137,"pre")(138,"code",25),e._uU(139,"\n$ yarn prisma\n"),e.qZA()()(),e.TgZ(140,"p"),e._uU(141,"Now create your initial Prisma setup using the "),e.TgZ(142,"code"),e._uU(143,"init"),e.qZA(),e._uU(144," command of the Prisma CLI:"),e.qZA(),e.TgZ(145,"pre")(146,"code",25),e._uU(147,"\n$ npx prisma init\n"),e.qZA()(),e.TgZ(148,"p"),e._uU(149,"This command creates a new "),e.TgZ(150,"code"),e._uU(151,"prisma"),e.qZA(),e._uU(152," directory with the following contents:"),e.qZA(),e.TgZ(153,"ul")(154,"li")(155,"code"),e._uU(156,"schema.prisma"),e.qZA(),e._uU(157,": Specifies your database connection and contains the database schema"),e.qZA(),e.TgZ(158,"li")(159,"code"),e._uU(160,".env"),e.qZA(),e._uU(161,": A "),e.TgZ(162,"a",29),e._uU(163,"dotenv"),e.qZA(),e._uU(164," file, typically used to store your database credentials in a group of environment variables"),e.qZA()(),e.TgZ(165,"h4",30)(166,"span"),e._uU(167,"Set the database connection"),e.qZA()(),e.TgZ(168,"p"),e._uU(169,"Your database connection is configured in the "),e.TgZ(170,"code"),e._uU(171,"datasource"),e.qZA(),e._uU(172," block in your "),e.TgZ(173,"code"),e._uU(174,"schema.prisma"),e.qZA(),e._uU(175," file. By default it's set to "),e.TgZ(176,"code"),e._uU(177,"postgresql"),e.qZA(),e._uU(178,", but since you're using a SQLite database in this guide you need to adjust the "),e.TgZ(179,"code"),e._uU(180,"provider"),e.qZA(),e._uU(181," field of the "),e.TgZ(182,"code"),e._uU(183,"datasource"),e.qZA(),e._uU(184," block to "),e.TgZ(185,"code"),e._uU(186,"sqlite"),e.qZA(),e._uU(187,":"),e.qZA(),e.TgZ(188,"pre")(189,"code",31),e._uU(190,'\ndatasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.qZA()(),e.TgZ(191,"p"),e._uU(192,"Now, open up "),e.TgZ(193,"code"),e._uU(194,".env"),e.qZA(),e._uU(195," and adjust the "),e.TgZ(196,"code"),e._uU(197,"DATABASE_URL"),e.qZA(),e._uU(198," environment variable to look as follows:"),e.qZA(),e.TgZ(199,"pre")(200,"code",25),e._uU(201,'\nDATABASE_URL="file:./dev.db"\n'),e.qZA()(),e.TgZ(202,"p"),e._uU(203,"SQLite databases are simple files; no server is required to use a SQLite database. So instead of configuring a connection URL with a "),e.TgZ(204,"em"),e._uU(205,"host"),e.qZA(),e._uU(206," and "),e.TgZ(207,"em"),e._uU(208,"port"),e.qZA(),e._uU(209,", you can just point it to a local file which in this case is called "),e.TgZ(210,"code"),e._uU(211,"dev.db"),e.qZA(),e._uU(212,". This file will be created in the next step."),e.qZA(),e.TgZ(213,"details")(214,"summary"),e._uU(215,"Expand if you're using PostgreSQL or MySQL"),e.qZA(),e.TgZ(216,"p"),e._uU(217,"With PostgreSQL and MySQL, you need to configure the connection URL to point to the "),e.TgZ(218,"em"),e._uU(219,"database server"),e.qZA(),e._uU(220,". You can learn more about the required connection URL format "),e.TgZ(221,"a",32),e._uU(222,"here"),e.qZA(),e._uU(223,"."),e.qZA(),e.TgZ(224,"p")(225,"strong"),e._uU(226,"PostgreSQL"),e.qZA()(),e.TgZ(227,"p"),e._uU(228,"If you're using PostgreSQL, you have to adjust the "),e.TgZ(229,"code"),e._uU(230,"schema.prisma"),e.qZA(),e._uU(231," and "),e.TgZ(232,"code"),e._uU(233,".env"),e.qZA(),e._uU(234," files as follows:"),e.qZA(),e.TgZ(235,"p")(236,"strong")(237,"code"),e._uU(238,"schema.prisma"),e.qZA()()(),e.TgZ(239,"pre")(240,"code",31),e._uU(241,'\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.qZA()(),e.TgZ(242,"p")(243,"strong")(244,"code"),e._uU(245,".env"),e.qZA()()(),e.TgZ(246,"pre")(247,"code",25),e._uU(248,'\nDATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA"\n'),e.qZA()(),e.TgZ(249,"p"),e._uU(250,"Replace the placeholders spelled in all uppercase letters with your database credentials. Note that if you're unsure what to provide for the "),e.TgZ(251,"code"),e._uU(252,"SCHEMA"),e.qZA(),e._uU(253," placeholder, it's most likely the default value "),e.TgZ(254,"code"),e._uU(255,"public"),e.qZA(),e._uU(256,":"),e.qZA(),e.TgZ(257,"pre")(258,"code",25),e._uU(259,'\nDATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public"\n'),e.qZA()(),e.TgZ(260,"p"),e._uU(261,"If you want to learn how to set up a PostgreSQL database, you can follow this guide on "),e.TgZ(262,"a",33),e._uU(263,"setting up a free PostgreSQL database on Heroku"),e.qZA(),e._uU(264,"."),e.qZA(),e.TgZ(265,"p")(266,"strong"),e._uU(267,"MySQL"),e.qZA()(),e.TgZ(268,"p"),e._uU(269,"If you're using MySQL, you have to adjust the "),e.TgZ(270,"code"),e._uU(271,"schema.prisma"),e.qZA(),e._uU(272," and "),e.TgZ(273,"code"),e._uU(274,".env"),e.qZA(),e._uU(275," files as follows:"),e.qZA(),e.TgZ(276,"p")(277,"strong")(278,"code"),e._uU(279,"schema.prisma"),e.qZA()()(),e.TgZ(280,"pre")(281,"code",31),e._uU(282,'\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n'),e.qZA()(),e.TgZ(283,"p")(284,"strong")(285,"code"),e._uU(286,".env"),e.qZA()()(),e.TgZ(287,"pre")(288,"code",25),e._uU(289,'\nDATABASE_URL="mysql://USER:PASSWORD@HOST:PORT/DATABASE"\n'),e.qZA()(),e.TgZ(290,"p"),e._uU(291,"Replace the placeholders spelled in all uppercase letters with your database credentials."),e.qZA()(),e.TgZ(292,"h4",34)(293,"span"),e._uU(294,"Create two database tables with Prisma Migrate"),e.qZA()(),e.TgZ(295,"p"),e._uU(296,"In this section, you'll create two new tables in your database using "),e.TgZ(297,"a",35),e._uU(298,"Prisma Migrate"),e.qZA(),e._uU(299,". Prisma Migrate generates SQL migration files for your declarative data model definition in the Prisma schema. These migration files are fully customizable so that you can configure any additional features of the underlying database or include additional commands, e.g. for seeding."),e.qZA(),e.TgZ(300,"p"),e._uU(301,"Add the following two models to your "),e.TgZ(302,"code"),e._uU(303,"schema.prisma"),e.qZA(),e._uU(304," file:"),e.qZA(),e.TgZ(305,"pre")(306,"code",31),e._uU(307,"\nmodel User {\n  id    Int     @default(autoincrement()) @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int      @default(autoincrement()) @id\n  title     String\n  content   String?\n  published Boolean? @default(false)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n"),e.qZA()(),e.TgZ(308,"p"),e._uU(309,"With your Prisma models in place, you can generate your SQL migration files and run them against the database. Run the following commands in your terminal:"),e.qZA(),e.TgZ(310,"pre")(311,"code",25),e._uU(312,"\n$ npx prisma migrate dev --name init\n"),e.qZA()(),e.TgZ(313,"p"),e._uU(314,"This "),e.TgZ(315,"code"),e._uU(316,"prisma migrate dev"),e.qZA(),e._uU(317," command generates SQL files and directly runs them against the database. In this case, the following migration files was created in the existing "),e.TgZ(318,"code"),e._uU(319,"prisma"),e.qZA(),e._uU(320," directory:"),e.qZA(),e.TgZ(321,"pre")(322,"code",25),e._uU(323,"\n$ tree prisma\nprisma\n\u251c\u2500\u2500 dev.db\n\u251c\u2500\u2500 migrations\n\u2502   \u2514\u2500\u2500 20201207100915_init\n\u2502       \u2514\u2500\u2500 migration.sql\n\u2514\u2500\u2500 schema.prisma\n"),e.qZA()(),e.TgZ(324,"details")(325,"summary"),e._uU(326,"Expand to view the generated SQL statements"),e.qZA(),e.TgZ(327,"p"),e._uU(328,"The following tables were created in your SQLite database:"),e.qZA(),e.TgZ(329,"pre")(330,"code",36),e._uU(331,'\n-- CreateTable\nCREATE TABLE "User" (\n    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    "email" TEXT NOT NULL,\n    "name" TEXT\n);\n\n-- CreateTable\nCREATE TABLE "Post" (\n    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    "title" TEXT NOT NULL,\n    "content" TEXT,\n    "published" BOOLEAN DEFAULT false,\n    "authorId" INTEGER,\n\n    FOREIGN KEY ("authorId") REFERENCES "User"("id") ON DELETE SET NULL ON UPDATE CASCADE\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX "User.email_unique" ON "User"("email");\n'),e.qZA()()(),e.TgZ(332,"h4",37)(333,"span"),e._uU(334,"Install and generate Prisma Client"),e.qZA()(),e.TgZ(335,"p"),e._uU(336,"Prisma Client is a type-safe database client that's "),e.TgZ(337,"em"),e._uU(338,"generated"),e.qZA(),e._uU(339," from your Prisma model definition. Because of this approach, Prisma Client can expose "),e.TgZ(340,"a",38),e._uU(341,"CRUD"),e.qZA(),e._uU(342," operations that are "),e.TgZ(343,"em"),e._uU(344,"tailored"),e.qZA(),e._uU(345," specifically to your models."),e.qZA(),e.TgZ(346,"p"),e._uU(347,"To install Prisma Client in your project, run the following command in your terminal:"),e.qZA(),e.TgZ(348,"pre")(349,"code",25),e._uU(350,"\n$ npm install @prisma/client\n"),e.qZA()(),e.TgZ(351,"p"),e._uU(352,"Note that during installation, Prisma automatically invokes the "),e.TgZ(353,"code"),e._uU(354,"prisma generate"),e.qZA(),e._uU(355," command for you. In the future, you need to run this command after "),e.TgZ(356,"em"),e._uU(357,"every"),e.qZA(),e._uU(358," change to your Prisma models to update your generated Prisma Client."),e.qZA(),e.TgZ(359,"blockquote",13)(360,"strong"),e._uU(361,"Note"),e.qZA(),e._uU(362," The "),e.TgZ(363,"code"),e._uU(364,"prisma generate"),e.qZA(),e._uU(365," command reads your Prisma schema and updates the generated Prisma Client library inside "),e.TgZ(366,"code"),e._uU(367,"node_modules/@prisma/client"),e.qZA(),e._uU(368,".\n"),e.qZA(),e.TgZ(369,"h4",39)(370,"span"),e._uU(371,"Use Prisma Client in your NestJS services"),e.qZA()(),e.TgZ(372,"p"),e._uU(373,"You're now able to send database queries with Prisma Client. If you want to learn more about building queries with Prisma Client, check out the "),e.TgZ(374,"a",40),e._uU(375,"API documentation"),e.qZA(),e._uU(376,"."),e.qZA(),e.TgZ(377,"p"),e._uU(378,"When setting up your NestJS application, you'll want to abstract away the Prisma Client API for database queries within a service. To get started, you can create a new "),e.TgZ(379,"code"),e._uU(380,"PrismaService"),e.qZA(),e._uU(381," that takes care of instantiating "),e.TgZ(382,"code"),e._uU(383,"PrismaClient"),e.qZA(),e._uU(384," and connecting to your database."),e.qZA(),e.TgZ(385,"p"),e._uU(386,"Inside the "),e.TgZ(387,"code"),e._uU(388,"src"),e.qZA(),e._uU(389," directory, create a new file called "),e.TgZ(390,"code"),e._uU(391,"prisma.service.ts"),e.qZA(),e._uU(392," and add the following code to it:"),e.qZA(),e.TgZ(393,"pre")(394,"code",41),e._uU(395,"\nimport { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n"),e.qZA()(),e.TgZ(396,"blockquote",13)(397,"strong"),e._uU(398,"Note"),e.qZA(),e._uU(399," The "),e.TgZ(400,"code"),e._uU(401,"onModuleInit"),e.qZA(),e._uU(402," is optional \u2014 if you leave it out, Prisma will connect lazily on its first call to the database. We don't bother with "),e.TgZ(403,"code"),e._uU(404,"onModuleDestroy"),e.qZA(),e._uU(405,", since Prisma has its own shutdown hooks where it will destroy the connection. For more info on "),e.TgZ(406,"code"),e._uU(407,"enableShutdownHooks"),e.qZA(),e._uU(408,", please see "),e.TgZ(409,"a",42),e._uU(410,"Issues with "),e.TgZ(411,"code"),e._uU(412,"enableShutdownHooks"),e.qZA()()(),e.TgZ(413,"p"),e._uU(414,"Next, you can write services that you can use to make database calls for the "),e.TgZ(415,"code"),e._uU(416,"User"),e.qZA(),e._uU(417," and "),e.TgZ(418,"code"),e._uU(419,"Post"),e.qZA(),e._uU(420," models from your Prisma schema."),e.qZA(),e.TgZ(421,"p"),e._uU(422,"Still inside the "),e.TgZ(423,"code"),e._uU(424,"src"),e.qZA(),e._uU(425," directory, create a new file called "),e.TgZ(426,"code"),e._uU(427,"user.service.ts"),e.qZA(),e._uU(428," and add the following code to it:"),e.qZA(),e.TgZ(429,"pre")(430,"code",41),e._uU(431,"\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise<User | null> {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise<User[]> {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise<User> {\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise<User> {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise<User> {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n"),e.qZA()(),e.TgZ(432,"p"),e._uU(433,"Notice how you're using Prisma Client's generated types to ensure that the methods that are exposed by your service are properly typed. You therefore save the boilerplate of typing your models and creating additional interface or DTO files."),e.qZA(),e.TgZ(434,"p"),e._uU(435,"Now do the same for the "),e.TgZ(436,"code"),e._uU(437,"Post"),e.qZA(),e._uU(438," model."),e.qZA(),e.TgZ(439,"p"),e._uU(440,"Still inside the "),e.TgZ(441,"code"),e._uU(442,"src"),e.qZA(),e._uU(443," directory, create a new file called "),e.TgZ(444,"code"),e._uU(445,"post.service.ts"),e.qZA(),e._uU(446," and add the following code to it:"),e.qZA(),e.TgZ(447,"pre")(448,"code",41),e._uU(449,"\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostService {\n  constructor(private prisma: PrismaService) {}\n\n  async post(\n    postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n  ): Promise<Post | null> {\n    return this.prisma.post.findUnique({\n      where: postWhereUniqueInput,\n    });\n  }\n\n  async posts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n  }): Promise<Post[]> {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createPost(data: Prisma.PostCreateInput): Promise<Post> {\n    return this.prisma.post.create({\n      data,\n    });\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n  }): Promise<Post> {\n    const { data, where } = params;\n    return this.prisma.post.update({\n      data,\n      where,\n    });\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise<Post> {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n"),e.qZA()(),e.TgZ(450,"p"),e._uU(451,"Your "),e.TgZ(452,"code"),e._uU(453,"UserService"),e.qZA(),e._uU(454," and "),e.TgZ(455,"code"),e._uU(456,"PostService"),e.qZA(),e._uU(457," currently wrap the CRUD queries that are available in Prisma Client. In a real world application, the service would also be the place to add business logic to your application. For example, you could have a method called "),e.TgZ(458,"code"),e._uU(459,"updatePassword"),e.qZA(),e._uU(460," inside the "),e.TgZ(461,"code"),e._uU(462,"UserService"),e.qZA(),e._uU(463," that would be responsible for updating the password of a user."),e.qZA(),e.TgZ(464,"h5",43),e._uU(465,"Implement your REST API routes in the main app controller"),e.qZA(),e.TgZ(466,"p"),e._uU(467,"Finally, you'll use the services you created in the previous sections to implement the different routes of your app. For the purpose of this guide, you'll put all your routes into the already existing "),e.TgZ(468,"code"),e._uU(469,"AppController"),e.qZA(),e._uU(470," class."),e.qZA(),e.TgZ(471,"p"),e._uU(472,"Replace the contents of the "),e.TgZ(473,"code"),e._uU(474,"app.controller.ts"),e.qZA(),e._uU(475," file with the following code:"),e.qZA(),e.TgZ(476,"pre")(477,"code",41),e._uU(478,"\nimport {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PostService } from './post.service';\nimport { User as UserModel, Post as PostModel } from '@prisma/client';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly postService: PostService,\n  ) {}\n\n  @Get('post/:id')\n  async getPostById(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.post({ id: Number(id) });\n  }\n\n  @Get('feed')\n  async getPublishedPosts(): Promise<PostModel[]> {\n    return this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('filtered-posts/:searchString')\n  async getFilteredPosts(\n    @Param('searchString') searchString: string,\n  ): Promise<PostModel[]> {\n    return this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Post('post')\n  async createDraft(\n    @Body() postData: { title: string; content?: string; authorEmail: string },\n  ): Promise<PostModel> {\n    const { title, content, authorEmail } = postData;\n    return this.postService.createPost({\n      title,\n      content,\n      author: {\n        connect: { email: authorEmail },\n      },\n    });\n  }\n\n  @Post('user')\n  async signupUser(\n    @Body() userData: { name?: string; email: string },\n  ): Promise<UserModel> {\n    return this.userService.createUser(userData);\n  }\n\n  @Put('publish/:id')\n  async publishPost(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.deletePost({ id: Number(id) });\n  }\n}\n"),e.qZA()(),e.TgZ(479,"p"),e._uU(480,"This controller implements the following routes:"),e.qZA(),e.TgZ(481,"h6",44)(482,"code"),e._uU(483,"GET"),e.qZA()(),e.TgZ(484,"ul")(485,"li")(486,"code"),e._uU(487,"/post/:id"),e.qZA(),e._uU(488,": Fetch a single post by its "),e.TgZ(489,"code"),e._uU(490,"id"),e.qZA()(),e.TgZ(491,"li")(492,"code"),e._uU(493,"/feed"),e.qZA(),e._uU(494,": Fetch all "),e.TgZ(495,"em"),e._uU(496,"published"),e.qZA(),e._uU(497," posts"),e.qZA(),e.TgZ(498,"li")(499,"code"),e._uU(500,"/filter-posts/:searchString"),e.qZA(),e._uU(501,": Filter posts by "),e.TgZ(502,"code"),e._uU(503,"title"),e.qZA(),e._uU(504," or "),e.TgZ(505,"code"),e._uU(506,"content"),e.qZA()()(),e.TgZ(507,"h6",45)(508,"code"),e._uU(509,"POST"),e.qZA()(),e.TgZ(510,"ul")(511,"li")(512,"code"),e._uU(513,"/post"),e.qZA(),e._uU(514,": Create a new post"),e.TgZ(515,"ul")(516,"li"),e._uU(517,"Body:"),e.TgZ(518,"ul")(519,"li")(520,"code"),e._uU(521,"title: String"),e.qZA(),e._uU(522," (required): The title of the post"),e.qZA(),e.TgZ(523,"li")(524,"code"),e._uU(525,"content: String"),e.qZA(),e._uU(526," (optional): The content of the post"),e.qZA(),e.TgZ(527,"li")(528,"code"),e._uU(529,"authorEmail: String"),e.qZA(),e._uU(530," (required): The email of the user that creates the post"),e.qZA()()()()(),e.TgZ(531,"li")(532,"code"),e._uU(533,"/user"),e.qZA(),e._uU(534,": Create a new user"),e.TgZ(535,"ul")(536,"li"),e._uU(537,"Body:"),e.TgZ(538,"ul")(539,"li")(540,"code"),e._uU(541,"email: String"),e.qZA(),e._uU(542," (required): The email address of the user"),e.qZA(),e.TgZ(543,"li")(544,"code"),e._uU(545,"name: String"),e.qZA(),e._uU(546," (optional): The name of the user"),e.qZA()()()()()(),e.TgZ(547,"h6",46)(548,"code"),e._uU(549,"PUT"),e.qZA()(),e.TgZ(550,"ul")(551,"li")(552,"code"),e._uU(553,"/publish/:id"),e.qZA(),e._uU(554,": Publish a post by its "),e.TgZ(555,"code"),e._uU(556,"id"),e.qZA()()(),e.TgZ(557,"h6",47)(558,"code"),e._uU(559,"DELETE"),e.qZA()(),e.TgZ(560,"ul")(561,"li")(562,"code"),e._uU(563,"/post/:id"),e.qZA(),e._uU(564,": Delete a post by its "),e.TgZ(565,"code"),e._uU(566,"id"),e.qZA()()(),e.TgZ(567,"h4",48)(568,"span"),e._uU(569,"Issues with "),e.TgZ(570,"code"),e._uU(571,"enableShutdownHooks"),e.qZA()()(),e.TgZ(572,"p"),e._uU(573,"Prisma interferes with NestJS "),e.TgZ(574,"code"),e._uU(575,"enableShutdownHooks"),e.qZA(),e._uU(576,". Prisma listens for shutdown signals and will call "),e.TgZ(577,"code"),e._uU(578,"process.exit()"),e.qZA(),e._uU(579," before your application shutdown hooks fire. To deal with this, you would need to add a listener for Prisma "),e.TgZ(580,"code"),e._uU(581,"beforeExit"),e.qZA(),e._uU(582," event."),e.qZA(),e.TgZ(583,"pre")(584,"code",41),e._uU(585,"\n// main.ts\n...\nimport { PrismaService } from './services/prisma/prisma.service';\n...\nasync function bootstrap() {\n  ...\n  const prismaService = app.get(PrismaService);\n  await prismaService.enableShutdownHooks(app)\n  ...\n}\nbootstrap()\n"),e.qZA()(),e.TgZ(586,"p"),e._uU(587,"You can "),e.TgZ(588,"a",49),e._uU(589,"read more"),e.qZA(),e._uU(590," about Prisma handling of shutdown signal, and "),e.TgZ(591,"code"),e._uU(592,"beforeExit"),e.qZA(),e._uU(593," event."),e.qZA(),e.TgZ(594,"h4",50)(595,"span"),e._uU(596,"Summary"),e.qZA()(),e.TgZ(597,"p"),e._uU(598,"In this recipe, you learned how to use Prisma along with NestJS to implement a REST API. The controller that implements the routes of the API is calling a "),e.TgZ(599,"code"),e._uU(600,"PrismaService"),e.qZA(),e._uU(601," which in turn uses Prisma Client to send queries to a database to fulfill the data needs of incoming requests."),e.qZA(),e.TgZ(602,"p"),e._uU(603,"If you want to learn more about using NestJS with Prisma, be sure to check out the following resources:"),e.qZA(),e.TgZ(604,"ul")(605,"li")(606,"a",51),e._uU(607,"NestJS & Prisma"),e.qZA()(),e.TgZ(608,"li")(609,"a",19),e._uU(610,"Ready-to-run example projects for REST & GraphQL"),e.qZA()(),e.TgZ(611,"li")(612,"a",52),e._uU(613,"Production-ready starter kit"),e.qZA()(),e.TgZ(614,"li")(615,"a",53),e._uU(616,"Video: Accessing Databases using NestJS with Prisma (5min)"),e.qZA(),e._uU(617," by "),e.TgZ(618,"a",54),e._uU(619,"Marc Stammerjohann"),e.qZA()()()())},dependencies:[u.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Prisma"}},{path:"terminus",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-terminus"]],features:[e.qOj],decls:515,vars:80,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/terminus.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","healthchecks-terminus"],["appAnchor","","id","getting-started"],[1,"language-bash"],["appAnchor","","id","setting-up-a-healthcheck"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/terminus"],[1,"info"],["routerLink","cli/overview"],[1,"filename"],["app50140d25e77a65982e4035b0e80deee35d61b451",""],[1,"language-typescript"],["routerLink","/controllers"],["href","fundamentals/lifecycle-events#application-shutdown"],["appAnchor","","id","http-healthcheck"],["app97346ac70b594b0b9d1f692e84686dd731107867",""],["app2fa274673d0578a823c67146f6a7e6d836ef27ed",""],[1,"language-json"],["id","check-for-specific-http-response-codes"],["app9b1e1334b8547ce169bc386caca2cd36e82bf393",""],["appAnchor","","id","typeorm-health-indicator"],["routerLink","/techniques/sql"],["appa0e1ec96f549c4f78f700b758414f8402a9fd45d",""],["href","techniques/database#multiple-databases"],["app37d89298919f3808254620afb08f81c747955b50",""],["appAnchor","","id","disk-health-indicator"],["appd83f4bcc5e1c0ea49750684ad24dffdfbef0d48b",""],["app1a148f46165facefc7aa8f07204ff67b81b2294f",""],["appAnchor","","id","memory-health-indicator"],["app98da7818dfaa9b1a73e492fa1b09a7191cb3ecee",""],["app4b9411aae0a707b344e8146014d4618e4c7833ad",""],["appAnchor","","id","custom-health-indicator"],["app28fca4dbe58b130d41a24f63e865865f9e102f2d",""],["app556024e0db20e82dd280bb7fb4f28b9459100bf7",""],["app39e30c88abbdbd6da586d7ba5195ae44d7870f4d",""],["appAnchor","","id","more-examples"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/terminus/tree/master/sample"]],template:function(o,a){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Healthchecks (Terminus)"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Terminus integration provides you with "),e.TgZ(9,"strong"),e._uU(10,"readiness/liveness"),e.qZA(),e._uU(11," health checks. Healthchecks are crucial when it comes to complex\nbackend setups. In a nutshell, a health check in the realm of web development usually consists of a special address, for example, "),e.TgZ(12,"code"),e._uU(13,"https://my-website.com/health/readiness"),e.qZA(),e._uU(14,".\nA service or a component of your infrastructure (e.g., Kubernetes) checks this address continuously. Depending on the HTTP status code returned from a "),e.TgZ(15,"code"),e._uU(16,"GET"),e.qZA(),e._uU(17,' request to this address the service will take action when it receives an "unhealthy" response.\nSince the definition of "healthy" or "unhealthy" varies with the type of service you provide, the '),e.TgZ(18,"strong"),e._uU(19,"Terminus"),e.qZA(),e._uU(20," integration supports you with a\nset of "),e.TgZ(21,"strong"),e._uU(22,"health indicators"),e.qZA(),e._uU(23,"."),e.qZA(),e.TgZ(24,"p"),e._uU(25,"As an example, if your web server uses MongoDB to store its data, it would be vital information whether MongoDB is still up and running.\nIn that case, you can make use of the "),e.TgZ(26,"code"),e._uU(27,"MongooseHealthIndicator"),e.qZA(),e._uU(28,". If configured correctly - more on that later - your health check address will return\na healthy or unhealthy HTTP status code, depending on whether MongoDB is running."),e.qZA(),e.TgZ(29,"h4",6)(30,"span"),e._uU(31,"Getting started"),e.qZA()(),e.TgZ(32,"p"),e._uU(33,"To get started with "),e.TgZ(34,"code"),e._uU(35,"@nestjs/terminus"),e.qZA(),e._uU(36," we need to install the required dependency."),e.qZA(),e.TgZ(37,"pre")(38,"code",7),e._uU(39,"\n$ npm install --save @nestjs/terminus\n"),e.qZA()(),e.TgZ(40,"h4",8)(41,"span"),e._uU(42,"Setting up a Healthcheck"),e.qZA()(),e.TgZ(43,"p"),e._uU(44,"A health check represents a summary of "),e.TgZ(45,"strong"),e._uU(46,"health indicators"),e.qZA(),e._uU(47,". A health indicator executes a check of a service, whether it is in a healthy or unhealthy state. A health check is positive if all the assigned health indicators are up and running. Because a lot of applications will need similar health indicators, "),e.TgZ(48,"a",9)(49,"code"),e._uU(50,"@nestjs/terminus"),e.qZA()(),e._uU(51," provides a set of predefined indicators, such as:"),e.qZA(),e.TgZ(52,"ul")(53,"li")(54,"code"),e._uU(55,"HttpHealthIndicator"),e.qZA()(),e.TgZ(56,"li")(57,"code"),e._uU(58,"TypeOrmHealthIndicator"),e.qZA()(),e.TgZ(59,"li")(60,"code"),e._uU(61,"MongooseHealthIndicator"),e.qZA()(),e.TgZ(62,"li")(63,"code"),e._uU(64,"SequelizeHealthIndicator"),e.qZA()(),e.TgZ(65,"li")(66,"code"),e._uU(67,"MicroserviceHealthIndicator"),e.qZA()(),e.TgZ(68,"li")(69,"code"),e._uU(70,"GRPCHealthIndicator"),e.qZA()(),e.TgZ(71,"li")(72,"code"),e._uU(73,"MemoryHealthIndicator"),e.qZA()(),e.TgZ(74,"li")(75,"code"),e._uU(76,"DiskHealthIndicator"),e.qZA()()(),e.TgZ(77,"p"),e._uU(78,"To get started with our first health check, let's create the "),e.TgZ(79,"code"),e._uU(80,"HealthModule"),e.qZA(),e._uU(81," and import the "),e.TgZ(82,"code"),e._uU(83,"TerminusModule"),e.qZA(),e._uU(84," into it in its imports array."),e.qZA(),e.TgZ(85,"blockquote",10)(86,"strong"),e._uU(87,"Hint"),e.qZA(),e._uU(88," To create the module using the "),e.TgZ(89,"a",11),e._uU(90,"Nest CLI"),e.qZA(),e._uU(91,", simply execute the "),e.TgZ(92,"code"),e._uU(93,"$ nest g module health"),e.qZA(),e._uU(94," command.\n"),e.qZA(),e.TgZ(95,"span",12),e._uU(96),e.ALo(97,"extension"),e._UZ(98,"app-tabs",null,13),e.qZA(),e.TgZ(100,"pre")(101,"code",14),e._uU(102,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [TerminusModule]\n})\nexport class HealthModule {}\n"),e.qZA()(),e.TgZ(103,"p"),e._uU(104,"Our healthcheck(s) can be executed using a "),e.TgZ(105,"a",15),e._uU(106,"controller"),e.qZA(),e._uU(107,", which can be easily set up using the "),e.TgZ(108,"a",11),e._uU(109,"Nest CLI"),e.qZA(),e._uU(110,"."),e.qZA(),e.TgZ(111,"pre")(112,"code",7),e._uU(113,"\n$ nest g controller health\n"),e.qZA()(),e.TgZ(114,"blockquote",10)(115,"strong"),e._uU(116,"Info"),e.qZA(),e._uU(117," It is highly recommended to enable shutdown hooks in your application. Terminus integration makes use of this lifecycle event if enabled. Read more about shutdown hooks "),e.TgZ(118,"a",16),e._uU(119,"here"),e.qZA(),e._uU(120,".\n"),e.qZA(),e.TgZ(121,"h4",17)(122,"span"),e._uU(123,"HTTP Healthcheck"),e.qZA()(),e.TgZ(124,"p"),e._uU(125,"Once we have installed "),e.TgZ(126,"code"),e._uU(127,"@nestjs/terminus"),e.qZA(),e._uU(128,", imported our "),e.TgZ(129,"code"),e._uU(130,"TerminusModule"),e.qZA(),e._uU(131," and created a new controller, we are ready to create a health check."),e.qZA(),e.TgZ(132,"p"),e._uU(133,"The "),e.TgZ(134,"code"),e._uU(135,"HTTPHealthIndicator"),e.qZA(),e._uU(136," requires the "),e.TgZ(137,"code"),e._uU(138,"@nestjs/axios"),e.qZA(),e._uU(139," package so make sure to have it installed:"),e.qZA(),e.TgZ(140,"pre")(141,"code",7),e._uU(142,"\n$ npm i --save @nestjs/axios\n"),e.qZA()(),e.TgZ(143,"p"),e._uU(144,"Now we can setup our "),e.TgZ(145,"code"),e._uU(146,"HealthController"),e.qZA(),e._uU(147,":"),e.qZA(),e.TgZ(148,"span",12),e._uU(149),e.ALo(150,"extension"),e._UZ(151,"app-tabs",null,18),e.qZA(),e.TgZ(153,"pre")(154,"code",14),e._uU(155,"\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ]);\n  }\n}\n"),e.qZA()(),e.TgZ(156,"pre")(157,"code",14),e._uU(158,"\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';\n\n@Controller('health')\n@Dependencies(HealthCheckService, HttpHealthIndicator)\nexport class HealthController {\n  constructor(\n    private health,\n    private http,\n  ) { }\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ])\n  }\n}\n"),e.qZA()(),e.TgZ(159,"span",12),e._uU(160),e.ALo(161,"extension"),e._UZ(162,"app-tabs",null,19),e.qZA(),e.TgZ(164,"pre")(165,"code",14),e._uU(166,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n"),e.qZA()(),e.TgZ(167,"pre")(168,"code",14),e._uU(169,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n"),e.qZA()(),e.TgZ(170,"p"),e._uU(171,"Our health check will now send a "),e.TgZ(172,"em"),e._uU(173,"GET"),e.qZA(),e._uU(174,"-request to the "),e.TgZ(175,"code"),e._uU(176,"https://docs.nestjs.com"),e.qZA(),e._uU(177," address. If\nwe get a healthy response from that address, our route at "),e.TgZ(178,"code"),e._uU(179,"http://localhost:3000/health"),e.qZA(),e._uU(180," will return\nthe following object with a 200 status code."),e.qZA(),e.TgZ(181,"pre")(182,"code",20),e._uU(183,'\n{\n  "status": "ok",\n  "info": {\n    "nestjs-docs": {\n      "status": "up"\n    }\n  },\n  "error": {},\n  "details": {\n    "nestjs-docs": {\n      "status": "up"\n    }\n  }\n}\n'),e.qZA()(),e.TgZ(184,"p"),e._uU(185,"The interface of this response object can be accessed from the "),e.TgZ(186,"code"),e._uU(187,"@nestjs/terminus"),e.qZA(),e._uU(188," package with the "),e.TgZ(189,"code"),e._uU(190,"HealthCheckResult"),e.qZA(),e._uU(191," interface."),e.qZA(),e.TgZ(192,"table"),e._UZ(193,"thead"),e.TgZ(194,"tbody")(195,"tr")(196,"td")(197,"code"),e._uU(198,"status"),e.qZA()(),e.TgZ(199,"td"),e._uU(200,"If any health indicator failed the status will be "),e.TgZ(201,"code"),e._uU(202,"'error'"),e.qZA(),e._uU(203,". If the NestJS app is shutting down but still accepting HTTP requests, the health check will have the "),e.TgZ(204,"code"),e._uU(205,"'shutting_down'"),e.qZA(),e._uU(206," status."),e.qZA(),e.TgZ(207,"td")(208,"code"),e._uU(209,"'error' | 'ok' | 'shutting_down'"),e.qZA()()(),e.TgZ(210,"tr")(211,"td")(212,"code"),e._uU(213,"info"),e.qZA()(),e.TgZ(214,"td"),e._uU(215,"Object containing information of each health indicator which is of status "),e.TgZ(216,"code"),e._uU(217,"'up'"),e.qZA(),e._uU(218,', or in other words "healthy".'),e.qZA(),e.TgZ(219,"td")(220,"code"),e._uU(221,"object"),e.qZA()()(),e.TgZ(222,"tr")(223,"td")(224,"code"),e._uU(225,"error"),e.qZA()(),e.TgZ(226,"td"),e._uU(227,"Object containing information of each health indicator which is of status "),e.TgZ(228,"code"),e._uU(229,"'down'"),e.qZA(),e._uU(230,', or in other words "unhealthy".'),e.qZA(),e.TgZ(231,"td")(232,"code"),e._uU(233,"object"),e.qZA()()(),e.TgZ(234,"tr")(235,"td")(236,"code"),e._uU(237,"details"),e.qZA()(),e.TgZ(238,"td"),e._uU(239,"Object containing all information of each health indicator"),e.qZA(),e.TgZ(240,"td")(241,"code"),e._uU(242,"object"),e.qZA()()()()(),e.TgZ(243,"h5",21),e._uU(244,"Check for specific HTTP response codes"),e.qZA(),e.TgZ(245,"p"),e._uU(246,"In certain cases, you might want to check for specific criteria and validate the response. As an example, let's assume\n"),e.TgZ(247,"code"),e._uU(248,"https://my-external-service.com"),e.qZA(),e._uU(249," returns a response code "),e.TgZ(250,"code"),e._uU(251,"204"),e.qZA(),e._uU(252,". With "),e.TgZ(253,"code"),e._uU(254,"HttpHealthIndicator.responseCheck"),e.qZA(),e._uU(255," you can\ncheck for that response code specifically and determine all other codes as unhealthy."),e.qZA(),e.TgZ(256,"p"),e._uU(257,"In case any other response code other than "),e.TgZ(258,"code"),e._uU(259,"204"),e.qZA(),e._uU(260," gets returned, the following example would be unhealthy. The third parameter\nrequires you to provide a function (sync or async) which returns a boolean whether the response is considered\nhealthy ("),e.TgZ(261,"code"),e._uU(262,"true"),e.qZA(),e._uU(263,") or unhealthy ("),e.TgZ(264,"code"),e._uU(265,"false"),e.qZA(),e._uU(266,")."),e.qZA(),e.TgZ(267,"span",12),e._uU(268),e.ALo(269,"extension"),e._UZ(270,"app-tabs",null,22),e.qZA(),e.TgZ(272,"pre")(273,"code",14),e._uU(274,"\n// Within the `HealthController`-class\n\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () =>\n      this.http.responseCheck(\n        'my-external-service',\n        'https://my-external-service.com',\n        (res) => res.status === 204,\n      ),\n  ]);\n}\n"),e.qZA()(),e.TgZ(275,"h4",23)(276,"span"),e._uU(277,"TypeOrm health indicator"),e.qZA()(),e.TgZ(278,"p"),e._uU(279,"Terminus offers the capability to add database checks to your health check. In order to get started with this health indicator, you\nshould check out the "),e.TgZ(280,"a",24),e._uU(281,"Database chapter"),e.qZA(),e._uU(282," and make sure your database connection within your application is established."),e.qZA(),e.TgZ(283,"blockquote",10)(284,"strong"),e._uU(285,"Hint"),e.qZA(),e._uU(286," Behind the scenes the "),e.TgZ(287,"code"),e._uU(288,"TypeOrmHealthIndicator"),e.qZA(),e._uU(289," simply executes a "),e.TgZ(290,"code"),e._uU(291,"SELECT 1"),e.qZA(),e._uU(292,"-SQL command which is often used to verify whether the database still alive. In case you are using an Oracle database it uses "),e.TgZ(293,"code"),e._uU(294,"SELECT 1 FROM DUAL"),e.qZA(),e._uU(295,".\n"),e.qZA(),e.TgZ(296,"span",12),e._uU(297),e.ALo(298,"extension"),e._UZ(299,"app-tabs",null,25),e.qZA(),e.TgZ(301,"pre")(302,"code",14),e._uU(303,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n    ]);\n  }\n}\n"),e.qZA()(),e.TgZ(304,"pre")(305,"code",14),e._uU(306,"\n@Controller('health')\n@Dependencies(HealthCheckService, TypeOrmHealthIndicator)\nexport class HealthController {\n  constructor(\n    private health,\n    private db,\n  ) { }\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n    ])\n  }\n}\n"),e.qZA()(),e.TgZ(307,"p"),e._uU(308,"If your database is reachable, you should now see the following JSON-result when requesting "),e.TgZ(309,"code"),e._uU(310,"http://localhost:3000"),e.qZA(),e._uU(311," with a "),e.TgZ(312,"code"),e._uU(313,"GET"),e.qZA(),e._uU(314," request:"),e.qZA(),e.TgZ(315,"pre")(316,"code",20),e._uU(317,'\n{\n  "status": "ok",\n  "info": {\n    "database": {\n      "status": "up"\n    }\n  },\n  "error": {},\n  "details": {\n    "database": {\n      "status": "up"\n    }\n  }\n}\n'),e.qZA()(),e.TgZ(318,"p"),e._uU(319,"In case your app uses "),e.TgZ(320,"a",26),e._uU(321,"multiple databases"),e.qZA(),e._uU(322,", you need to inject each\nconnection into your "),e.TgZ(323,"code"),e._uU(324,"HealthController"),e.qZA(),e._uU(325,". Then, you can simply pass the connection reference to the "),e.TgZ(326,"code"),e._uU(327,"TypeOrmHealthIndicator"),e.qZA(),e._uU(328,"."),e.qZA(),e.TgZ(329,"span",12),e._uU(330),e.ALo(331,"extension"),e._UZ(332,"app-tabs",null,27),e.qZA(),e.TgZ(334,"pre")(335,"code",14),e._uU(336,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n    @InjectConnection('albumsConnection')\n    private albumsConnection: Connection,\n    @InjectConnection()\n    private defaultConnection: Connection,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('albums-database', { connection: this.albumsConnection }),\n      () => this.db.pingCheck('database', { connection: this.defaultConnection }),\n    ]);\n  }\n}\n"),e.qZA()(),e.TgZ(337,"h4",28)(338,"span"),e._uU(339,"Disk health indicator"),e.qZA()(),e.TgZ(340,"p"),e._uU(341,"With the "),e.TgZ(342,"code"),e._uU(343,"DiskHealthIndicator"),e.qZA(),e._uU(344," we can check how much storage is in use. To get started, make sure to inject the "),e.TgZ(345,"code"),e._uU(346,"DiskHealthIndicator"),e.qZA(),e._uU(347,"\ninto your "),e.TgZ(348,"code"),e._uU(349,"HealthController"),e.qZA(),e._uU(350,". The following example checks the storage used of the path "),e.TgZ(351,"code"),e._uU(352,"/"),e.qZA(),e._uU(353," (or on Windows you can use "),e.TgZ(354,"code"),e._uU(355,"C:\\\\"),e.qZA(),e._uU(356,").\nIf that exceeds more than 50% of the total storage space it would response with an unhealthy Health Check."),e.qZA(),e.TgZ(357,"span",12),e._uU(358),e.ALo(359,"extension"),e._UZ(360,"app-tabs",null,29),e.qZA(),e.TgZ(362,"pre")(363,"code",14),e._uU(364,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly disk: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ]);\n  }\n}\n"),e.qZA()(),e.TgZ(365,"pre")(366,"code",14),e._uU(367,"\n@Controller('health')\n@Dependencies(HealthCheckService, DiskHealthIndicator)\nexport class HealthController {\n  constructor(health, disk) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ])\n  }\n}\n"),e.qZA()(),e.TgZ(368,"p"),e._uU(369,"With the "),e.TgZ(370,"code"),e._uU(371,"DiskHealthIndicator.checkStorage"),e.qZA(),e._uU(372," function you also have the possibility to check for a fixed amount of space.\nThe following example would be unhealthy in case the path "),e.TgZ(373,"code"),e._uU(374,"/my-app/"),e.qZA(),e._uU(375," would exceed 250GB."),e.qZA(),e.TgZ(376,"span",12),e._uU(377),e.ALo(378,"extension"),e._UZ(379,"app-tabs",null,30),e.qZA(),e.TgZ(381,"pre")(382,"code",14),e._uU(383,"\n// Within the `HealthController`-class\n\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () => this.disk.checkStorage('storage', {  path: '/', threshold: 250 * 1024 * 1024 * 1024, })\n  ]);\n}\n"),e.qZA()(),e.TgZ(384,"h4",31)(385,"span"),e._uU(386,"Memory health indicator"),e.qZA()(),e.TgZ(387,"p"),e._uU(388,"To make sure your process does not exceed a certain memory limit the "),e.TgZ(389,"code"),e._uU(390,"MemoryHealthIndicator"),e.qZA(),e._uU(391," can be used. The following example can be used to check the heap of your process."),e.qZA(),e.TgZ(392,"blockquote",10)(393,"strong"),e._uU(394,"Hint"),e.qZA(),e._uU(395," Heap is the portion of memory where dynamically allocated memory resides (i.e. memory allocated via malloc). Memory allocated from the heap will remain allocated until one of the following occurs:\n"),e.TgZ(396,"ul")(397,"li"),e._uU(398,"The memory is "),e.TgZ(399,"em"),e._uU(400,"free"),e.qZA(),e._uU(401,"'d"),e.qZA(),e.TgZ(402,"li"),e._uU(403,"The program terminates"),e.qZA()()(),e.TgZ(404,"span",12),e._uU(405),e.ALo(406,"extension"),e._UZ(407,"app-tabs",null,32),e.qZA(),e.TgZ(409,"pre")(410,"code",14),e._uU(411,"\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ]);\n  }\n}\n"),e.qZA()(),e.TgZ(412,"pre")(413,"code",14),e._uU(414,"\n@Controller('health')\n@Dependencies(HealthCheckService, MemoryHealthIndicator)\nexport class HealthController {\n  constructor(health, memory) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ])\n  }\n}\n"),e.qZA()(),e.TgZ(415,"p"),e._uU(416,"It is also possible to verify the memory RSS of your process with "),e.TgZ(417,"code"),e._uU(418,"MemoryHealthIndicator.checkRSS"),e.qZA(),e._uU(419,". This example\nwould return an unhealthy response code in case your process does have more than 150MB allocated."),e.qZA(),e.TgZ(420,"blockquote",10)(421,"strong"),e._uU(422,"Hint"),e.qZA(),e._uU(423," RSS is the Resident Set Size and is used to show how much memory is allocated to that process and is in RAM.\nIt does not include memory that is swapped out. It does include memory from shared libraries as long as the pages from\nthose libraries are actually in memory. It does include all stack and heap memory.\n"),e.qZA(),e.TgZ(424,"span",12),e._uU(425),e.ALo(426,"extension"),e._UZ(427,"app-tabs",null,33),e.qZA(),e.TgZ(429,"pre")(430,"code",14),e._uU(431,"\n// Within the `HealthController`-class\n\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () => this.memory.checkRSS('memory_rss', 150 * 1024 * 1024),\n  ]);\n}\n"),e.qZA()(),e.TgZ(432,"h4",34)(433,"span"),e._uU(434,"Custom health indicator"),e.qZA()(),e.TgZ(435,"p"),e._uU(436,"In some cases, the predefined health indicators provided by "),e.TgZ(437,"code"),e._uU(438,"@nestjs/terminus"),e.qZA(),e._uU(439," do not cover all of your health check requirements. In that case, you can set up a custom health indicator according to your needs."),e.qZA(),e.TgZ(440,"p"),e._uU(441,"Let's get started by creating a service that will represent our custom indicator. To get a basic understanding of how an indicator is structured, we will create an example "),e.TgZ(442,"code"),e._uU(443,"DogHealthIndicator"),e.qZA(),e._uU(444,". This service should have the state "),e.TgZ(445,"code"),e._uU(446,"'up'"),e.qZA(),e._uU(447," if every "),e.TgZ(448,"code"),e._uU(449,"Dog"),e.qZA(),e._uU(450," object has the type "),e.TgZ(451,"code"),e._uU(452,"'goodboy'"),e.qZA(),e._uU(453,". If that condition is not satisfied then it should throw an error."),e.qZA(),e.TgZ(454,"span",12),e._uU(455),e.ALo(456,"extension"),e._UZ(457,"app-tabs",null,35),e.qZA(),e.TgZ(459,"pre")(460,"code",14),e._uU(461,"\nimport { Injectable } from '@nestjs/common';\nimport { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';\n\nexport interface Dog {\n  name: string;\n  type: string;\n}\n\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator {\n  private dogs: Dog[] = [\n    { name: 'Fido', type: 'goodboy' },\n    { name: 'Rex', type: 'badboy' },\n  ];\n\n  async isHealthy(key: string): Promise<HealthIndicatorResult> {\n    const badboys = this.dogs.filter(dog => dog.type === 'badboy');\n    const isHealthy = badboys.length === 0;\n    const result = this.getStatus(key, isHealthy, { badboys: badboys.length });\n\n    if (isHealthy) {\n      return result;\n    }\n    throw new HealthCheckError('Dogcheck failed', result);\n  }\n}\n"),e.qZA()(),e.TgZ(462,"pre")(463,"code",14),e._uU(464,"\nimport { Injectable } from '@nestjs/common';\nimport { HealthCheckError } from '@godaddy/terminus';\n\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator {\n  dogs = [\n    { name: 'Fido', type: 'goodboy' },\n    { name: 'Rex', type: 'badboy' },\n  ];\n\n  async isHealthy(key) {\n    const badboys = this.dogs.filter(dog => dog.type === 'badboy');\n    const isHealthy = badboys.length === 0;\n    const result = this.getStatus(key, isHealthy, { badboys: badboys.length });\n\n    if (isHealthy) {\n      return result;\n    }\n    throw new HealthCheckError('Dogcheck failed', result);\n  }\n}\n"),e.qZA()(),e.TgZ(465,"p"),e._uU(466,"The next thing we need to do is register the health indicator as a provider."),e.qZA(),e.TgZ(467,"span",12),e._uU(468),e.ALo(469,"extension"),e._UZ(470,"app-tabs",null,36),e.qZA(),e.TgZ(472,"pre")(473,"code",14),e._uU(474,"\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { DogHealthIndicator } from './dog.health';\n\n@Module({\n  controllers: [HealthController],\n  imports: [TerminusModule],\n  providers: [DogHealthIndicator]\n})\nexport class HealthModule { }\n"),e.qZA()(),e.TgZ(475,"blockquote",10)(476,"strong"),e._uU(477,"Hint"),e.qZA(),e._uU(478," In a real-world application the "),e.TgZ(479,"code"),e._uU(480,"DogHealthIndicator"),e.qZA(),e._uU(481," should be provided in a separate module, for example, "),e.TgZ(482,"code"),e._uU(483,"DogModule"),e.qZA(),e._uU(484,", which then will be imported by the "),e.TgZ(485,"code"),e._uU(486,"HealthModule"),e.qZA(),e._uU(487,".\n"),e.qZA(),e.TgZ(488,"p"),e._uU(489,"The last required step is to add the now available health indicator in the required health check endpoint. For that, we go back to our "),e.TgZ(490,"code"),e._uU(491,"HealthController"),e.qZA(),e._uU(492," and add it to our "),e.TgZ(493,"code"),e._uU(494,"check"),e.qZA(),e._uU(495," function."),e.qZA(),e.TgZ(496,"span",12),e._uU(497),e.ALo(498,"extension"),e._UZ(499,"app-tabs",null,37),e.qZA(),e.TgZ(501,"pre")(502,"code",14),e._uU(503,"\nimport { HealthCheckService } from '@nestjs/terminus';\nimport { Injectable } from '@nestjs/common';\nimport { DogHealthIndicator } from './dog.health';\n\n@Injectable()\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private dogHealthIndicator: DogHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.dogHealthIndicator.isHealthy('dog'),\n    ])\n  }\n}\n"),e.qZA()(),e.TgZ(504,"pre")(505,"code",14),e._uU(506,"\nimport { HealthCheckService } from '@nestjs/terminus';\nimport { Injectable } from '@nestjs/common';\nimport { DogHealthIndicator } from './dog.health';\n\n@Injectable()\n@Dependencies(HealthCheckService, DogHealthIndicator)\nexport class HealthController {\n  constructor(\n    private health,\n    private dogHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  healthCheck() {\n    return this.health.check([\n      () => this.dogHealthIndicator.isHealthy('dog'),\n    ])\n  }\n}\n"),e.qZA()(),e.TgZ(507,"h4",38)(508,"span"),e._uU(509,"More examples"),e.qZA()(),e.TgZ(510,"p"),e._uU(511,"More working examples are available "),e.TgZ(512,"a",39),e._uU(513,"here"),e.qZA(),e._uU(514,"."),e.qZA()()),2&o){const r=e.MAs(99),c=e.MAs(152),l=e.MAs(163),d=e.MAs(271),s=e.MAs(300),h=e.MAs(333),_=e.MAs(361),U=e.MAs(380),A=e.MAs(408),k=e.MAs(428),T=e.MAs(458),C=e.MAs(471),q=e.MAs(500);e.xp6(96),e.hij(" ",e.xi3(97,41,"health.module",r.isJsActive),"\n"),e.xp6(53),e.hij(" ",e.xi3(150,44,"health.controller",c.isJsActive),"\n"),e.xp6(4),e.ekj("hide",c.isJsActive),e.xp6(3),e.ekj("hide",!c.isJsActive),e.xp6(4),e.hij(" ",e.xi3(161,47,"health.module",l.isJsActive),"\n"),e.xp6(4),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(101),e.hij(" ",e.xi3(269,50,"health.controller",d.isJsActive),"\n"),e.xp6(29),e.hij(" ",e.xi3(298,53,"health.controller",s.isJsActive),"\n"),e.xp6(4),e.ekj("hide",s.isJsActive),e.xp6(3),e.ekj("hide",!s.isJsActive),e.xp6(26),e.hij(" ",e.xi3(331,56,"health.controller",h.isJsActive),"\n"),e.xp6(28),e.hij(" ",e.xi3(359,59,"health.controller",_.isJsActive),"\n"),e.xp6(4),e.ekj("hide",_.isJsActive),e.xp6(3),e.ekj("hide",!_.isJsActive),e.xp6(12),e.hij(" ",e.xi3(378,62,"health.controller",U.isJsActive),"\n"),e.xp6(28),e.hij(" ",e.xi3(406,65,"health.controller",A.isJsActive),"\n"),e.xp6(4),e.ekj("hide",A.isJsActive),e.xp6(3),e.ekj("hide",!A.isJsActive),e.xp6(13),e.hij(" ",e.xi3(426,68,"health.controller",k.isJsActive),"\n"),e.xp6(30),e.hij(" ",e.xi3(456,71,"dog.health",T.isJsActive),"\n"),e.xp6(4),e.ekj("hide",T.isJsActive),e.xp6(3),e.ekj("hide",!T.isJsActive),e.xp6(6),e.hij(" ",e.xi3(469,74,"health.module",C.isJsActive),"\n"),e.xp6(29),e.hij(" ",e.xi3(498,77,"health.controller",q.isJsActive),"\n"),e.xp6(4),e.ekj("hide",q.isJsActive),e.xp6(3),e.ekj("hide",!q.isJsActive)}},dependencies:[Z.n,u.U,g.yS,m.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Health checks (Terminus)"}},{path:"documentation",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-documentation"]],features:[e.qOj],decls:53,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/documentation.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","documentation"],["appAnchor","","id","setup"],[1,"language-bash"],["appAnchor","","id","generation"],["rel","nofollow","target","_blank","href","https://compodoc.app/guides/usage.html"],["rel","nofollow","target","_blank","href","http://localhost:8080"],["src","/assets/documentation-compodoc-1.jpg"],["src","/assets/documentation-compodoc-2.jpg"],["appAnchor","","id","contribute"],["rel","nofollow","target","_blank","href","https://github.com/compodoc/compodoc"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Documentation"),e.qZA(),e.TgZ(7,"p")(8,"strong"),e._uU(9,"Compodoc"),e.qZA(),e._uU(10," is a documentation tool for Angular applications. Since Nest and Angular share similar project and code structures, "),e.TgZ(11,"strong"),e._uU(12,"Compodoc"),e.qZA(),e._uU(13," works with Nest applications as well."),e.qZA(),e.TgZ(14,"h4",6)(15,"span"),e._uU(16,"Setup"),e.qZA()(),e.TgZ(17,"p"),e._uU(18,"Setting up Compodoc inside an existing Nest project is very simple. Start by adding the dev-dependency with the following command in your OS terminal:"),e.qZA(),e.TgZ(19,"pre")(20,"code",7),e._uU(21,"\n$ npm i -D @compodoc/compodoc\n"),e.qZA()(),e.TgZ(22,"h4",8)(23,"span"),e._uU(24,"Generation"),e.qZA()(),e.TgZ(25,"p"),e._uU(26,"Generate project documentation using the following command (npm 6 is required for "),e.TgZ(27,"code"),e._uU(28,"npx"),e.qZA(),e._uU(29," support). See "),e.TgZ(30,"a",9),e._uU(31,"the official documentation"),e.qZA(),e._uU(32," for more options."),e.qZA(),e.TgZ(33,"pre")(34,"code",7),e._uU(35,"\n$ npx @compodoc/compodoc -p tsconfig.json -s\n"),e.qZA()(),e.TgZ(36,"p"),e._uU(37,"Open your browser and navigate to "),e.TgZ(38,"a",10),e._uU(39,"http://localhost:8080"),e.qZA(),e._uU(40,". You should see an initial Nest CLI project:"),e.qZA(),e.TgZ(41,"figure"),e._UZ(42,"img",11),e.qZA(),e.TgZ(43,"figure"),e._UZ(44,"img",12),e.qZA(),e.TgZ(45,"h4",13)(46,"span"),e._uU(47,"Contribute"),e.qZA()(),e.TgZ(48,"p"),e._uU(49,"You can participate and contribute to the Compodoc project "),e.TgZ(50,"a",14),e._uU(51,"here"),e.qZA(),e._uU(52,"."),e.qZA()())},dependencies:[u.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Documentation (Compodoc)"}},{path:"crud-utilities",redirectTo:"/recipes/crud-generator"},{path:"crud",redirectTo:"/recipes/crud-generator"},{path:"crud-generator",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-crud-generator"]],features:[e.qOj],decls:128,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/crud-generator.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","crud-generator"],["appAnchor","","id","introduction"],["routerLink","/cli/overview"],[1,"info"],["appAnchor","","id","generating-a-new-resource"],[1,"language-shell"],[1,"language-typescript"],[1,"warning"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"CRUD generator"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Throughout the life span of a project, when we build new features, we often need to add new resources to our application. These resources typically require multiple, repetitive operations that we have to repeat each time we define a new resource."),e.qZA(),e.TgZ(9,"h4",6)(10,"span"),e._uU(11,"Introduction"),e.qZA()(),e.TgZ(12,"p"),e._uU(13,"Let's imagine a real-world scenario, where we need to expose CRUD endpoints for 2 entities, let's say "),e.TgZ(14,"strong"),e._uU(15,"User"),e.qZA(),e._uU(16," and "),e.TgZ(17,"strong"),e._uU(18,"Product"),e.qZA(),e._uU(19," entities.\nFollowing the best practices, for each entity we would have to perform several operations, as follows:"),e.qZA(),e.TgZ(20,"ul")(21,"li"),e._uU(22,"Generate a module ("),e.TgZ(23,"code"),e._uU(24,"nest g mo"),e.qZA(),e._uU(25,") to keep code organized and establish clear boundaries (grouping related components)"),e.qZA(),e.TgZ(26,"li"),e._uU(27,"Generate a controller ("),e.TgZ(28,"code"),e._uU(29,"nest g co"),e.qZA(),e._uU(30,") to define CRUD routes (or queries/mutations for GraphQL applications)"),e.qZA(),e.TgZ(31,"li"),e._uU(32,"Generate a service ("),e.TgZ(33,"code"),e._uU(34,"nest g s"),e.qZA(),e._uU(35,") to implement & isolate business logic"),e.qZA(),e.TgZ(36,"li"),e._uU(37,"Generate an entity class/interface to represent the resource data shape"),e.qZA(),e.TgZ(38,"li"),e._uU(39,"Generate Data Transfer Objects (or inputs for GraphQL applications) to define how the data will be sent over the network"),e.qZA()(),e.TgZ(40,"p"),e._uU(41,"That's a lot of steps!"),e.qZA(),e.TgZ(42,"p"),e._uU(43,"To help speed up this repetitive process, "),e.TgZ(44,"a",7),e._uU(45,"Nest CLI"),e.qZA(),e._uU(46," provides a generator (schematic) that automatically generates all the boilerplate code to help us avoid doing all of this, and make the developer experience much simpler."),e.qZA(),e.TgZ(47,"blockquote",8)(48,"strong"),e._uU(49,"Note"),e.qZA(),e._uU(50," The schematic supports generating "),e.TgZ(51,"strong"),e._uU(52,"HTTP"),e.qZA(),e._uU(53," controllers, "),e.TgZ(54,"strong"),e._uU(55,"Microservice"),e.qZA(),e._uU(56," controllers, "),e.TgZ(57,"strong"),e._uU(58,"GraphQL"),e.qZA(),e._uU(59," resolvers (both code first and schema first), and "),e.TgZ(60,"strong"),e._uU(61,"WebSocket"),e.qZA(),e._uU(62," Gateways.\n"),e.qZA(),e.TgZ(63,"h4",9)(64,"span"),e._uU(65,"Generating a new resource"),e.qZA()(),e.TgZ(66,"p"),e._uU(67,"To create a new resource, simply run the following command in the root directory of your project:"),e.qZA(),e.TgZ(68,"pre")(69,"code",10),e._uU(70,"\n$ nest g resource\n"),e.qZA()(),e.TgZ(71,"p")(72,"code"),e._uU(73,"nest g resource"),e.qZA(),e._uU(74," command not only generates all the NestJS building blocks (module, service, controller classes) but also an entity class, DTO classes as well as the testing ("),e.TgZ(75,"code"),e._uU(76,".spec"),e.qZA(),e._uU(77,") files."),e.qZA(),e.TgZ(78,"p"),e._uU(79,"Below you can see the generated controller file (for REST API):"),e.qZA(),e.TgZ(80,"pre")(81,"code",11),e._uU(82,"\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n"),e.qZA()(),e.TgZ(83,"p"),e._uU(84,"Also, it automatically creates placeholders for all the CRUD endpoints (routes for REST APIs, queries and mutations for GraphQL, message subscribes for both Microservices and WebSocket Gateways) - all without having to lift a finger."),e.qZA(),e.TgZ(85,"blockquote",12)(86,"strong"),e._uU(87,"Note"),e.qZA(),e._uU(88," Generated service classes are "),e.TgZ(89,"strong"),e._uU(90,"not"),e.qZA(),e._uU(91," tied to any specific "),e.TgZ(92,"strong"),e._uU(93,"ORM (or data source)"),e.qZA(),e._uU(94,". This makes the generator generic enough to meet the needs of any project. By default, all methods will contain placeholders, allowing you to populate it with the data sources specific to your project.\n"),e.qZA(),e.TgZ(95,"p"),e._uU(96,"Likewise, if you want to generate resolvers for a GraphQL application, simply select the "),e.TgZ(97,"code"),e._uU(98,"GraphQL (code first)"),e.qZA(),e._uU(99," (or "),e.TgZ(100,"code"),e._uU(101,"GraphQL (schema first)"),e.qZA(),e._uU(102,") as your transport layer."),e.qZA(),e.TgZ(103,"p"),e._uU(104,"In this case, NestJS will generate a resolver class instead of a REST API controller:"),e.qZA(),e.TgZ(105,"pre")(106,"code",10),e._uU(107,"\n$ nest g resource users\n\n> ? What transport layer do you use? GraphQL (code first)\n> ? Would you like to generate CRUD entry points? Yes\n> CREATE src/users/users.module.ts (224 bytes)\n> CREATE src/users/users.resolver.spec.ts (525 bytes)\n> CREATE src/users/users.resolver.ts (1109 bytes)\n> CREATE src/users/users.service.spec.ts (453 bytes)\n> CREATE src/users/users.service.ts (625 bytes)\n> CREATE src/users/dto/create-user.input.ts (195 bytes)\n> CREATE src/users/dto/update-user.input.ts (281 bytes)\n> CREATE src/users/entities/user.entity.ts (187 bytes)\n> UPDATE src/app.module.ts (312 bytes)\n"),e.qZA()(),e.TgZ(108,"blockquote",8)(109,"strong"),e._uU(110,"Hint"),e.qZA(),e._uU(111," To avoid generating test files, you can pass the "),e.TgZ(112,"code"),e._uU(113,"--no-spec"),e.qZA(),e._uU(114," flag, as follows: "),e.TgZ(115,"code"),e._uU(116,"nest g resource users --no-spec"),e.qZA()(),e.TgZ(117,"p"),e._uU(118,"We can see below, that not only were all boilerplate mutations and queries created, but everything is all tied together. We're utilizing the "),e.TgZ(119,"code"),e._uU(120,"UsersService"),e.qZA(),e._uU(121,", "),e.TgZ(122,"code"),e._uU(123,"User"),e.qZA(),e._uU(124," Entity, and our DTO's."),e.qZA(),e.TgZ(125,"pre")(126,"code",11),e._uU(127,"\nimport { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\nimport { CreateUserInput } from './dto/create-user.input';\nimport { UpdateUserInput } from './dto/update-user.input';\n\n@Resolver(() => User)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Mutation(() => User)\n  createUser(@Args('createUserInput') createUserInput: CreateUserInput) {\n    return this.usersService.create(createUserInput);\n  }\n\n  @Query(() => [User], { name: 'users' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Query(() => User, { name: 'user' })\n  findOne(@Args('id', { type: () => Int }) id: number) {\n    return this.usersService.findOne(id);\n  }\n\n  @Mutation(() => User)\n  updateUser(@Args('updateUserInput') updateUserInput: UpdateUserInput) {\n    return this.usersService.update(updateUserInput.id, updateUserInput);\n  }\n\n  @Mutation(() => User)\n  removeUser(@Args('id', { type: () => Int }) id: number) {\n    return this.usersService.remove(id);\n  }\n}\n"),e.qZA()()())},dependencies:[u.U,g.yS],encapsulation:2,changeDetection:0}),t})(),data:{title:"CRUD generator"}},{path:"hot-reload",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-hot-reload"]],features:[e.qOj],decls:246,vars:4,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/hot-reload.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","hot-reload"],["rel","nofollow","target","_blank","href","https://github.com/webpack/webpack"],[1,"warning"],["id","with-cli"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/cli/overview"],["appAnchor","","id","installation"],[1,"language-bash"],[1,"info"],["appAnchor","","id","configuration"],[1,"language-typescript"],["appAnchor","","id","hot-module-replacement"],[1,"language-json"],["id","without-cli"],["appAnchor","","id","installation-1"],["appAnchor","","id","configuration-1"],["appAnchor","","id","hot-module-replacement-1"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/08-webpack"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Hot Reload"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"The highest impact on your application's bootstrapping process is "),e.TgZ(9,"strong"),e._uU(10,"TypeScript compilation"),e.qZA(),e._uU(11,". Fortunately, with "),e.TgZ(12,"a",6),e._uU(13,"webpack"),e.qZA(),e._uU(14," HMR (Hot-Module Replacement), we don't need to recompile the entire project each time a change occurs. This significantly decreases the amount of time necessary to instantiate your application, and makes iterative development a lot easier."),e.qZA(),e.TgZ(15,"blockquote",7)(16,"strong"),e._uU(17,"Warning"),e.qZA(),e._uU(18," Note that "),e.TgZ(19,"code"),e._uU(20,"webpack"),e.qZA(),e._uU(21," won't automatically copy your assets (e.g. "),e.TgZ(22,"code"),e._uU(23,"graphql"),e.qZA(),e._uU(24," files) to the "),e.TgZ(25,"code"),e._uU(26,"dist"),e.qZA(),e._uU(27," folder. Similarly, "),e.TgZ(28,"code"),e._uU(29,"webpack"),e.qZA(),e._uU(30," is not compatible with glob static paths (e.g., the "),e.TgZ(31,"code"),e._uU(32,"entities"),e.qZA(),e._uU(33," property in "),e.TgZ(34,"code"),e._uU(35,"TypeOrmModule"),e.qZA(),e._uU(36,").\n"),e.qZA(),e.TgZ(37,"h3",8),e._uU(38,"With CLI"),e.qZA(),e.TgZ(39,"p"),e._uU(40,"If you are using the "),e.TgZ(41,"a",9),e._uU(42,"Nest CLI"),e.qZA(),e._uU(43,", the configuration process is pretty straightforward. The CLI wraps "),e.TgZ(44,"code"),e._uU(45,"webpack"),e.qZA(),e._uU(46,", which allows use of the "),e.TgZ(47,"code"),e._uU(48,"HotModuleReplacementPlugin"),e.qZA(),e._uU(49,"."),e.qZA(),e.TgZ(50,"h4",10)(51,"span"),e._uU(52,"Installation"),e.qZA()(),e.TgZ(53,"p"),e._uU(54,"First install the required packages:"),e.qZA(),e.TgZ(55,"pre")(56,"code",11),e._uU(57,"\n$ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack\n"),e.qZA()(),e.TgZ(58,"blockquote",12)(59,"strong"),e._uU(60,"Hint"),e.qZA(),e._uU(61," If you use "),e.TgZ(62,"strong"),e._uU(63,"Yarn Berry"),e.qZA(),e._uU(64," (not classic Yarn), install the "),e.TgZ(65,"code"),e._uU(66,"webpack-pnp-externals"),e.qZA(),e._uU(67," package instead of the "),e.TgZ(68,"code"),e._uU(69,"webpack-node-externals"),e.qZA(),e._uU(70,".\n"),e.qZA(),e.TgZ(71,"h4",13)(72,"span"),e._uU(73,"Configuration"),e.qZA()(),e.TgZ(74,"p"),e._uU(75,"Once the installation is complete, create a "),e.TgZ(76,"code"),e._uU(77,"webpack-hmr.config.js"),e.qZA(),e._uU(78," file in the root directory of your application."),e.qZA(),e.TgZ(79,"pre")(80,"code",14),e._uU(81,"\nconst nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = function (options, webpack) {\n  return {\n    ...options,\n    entry: ['webpack/hot/poll?100', options.entry],\n    externals: [\n      nodeExternals({\n        allowlist: ['webpack/hot/poll?100'],\n      }),\n    ],\n    plugins: [\n      ...options.plugins,\n      new webpack.HotModuleReplacementPlugin(),\n      new webpack.WatchIgnorePlugin({\n        paths: [/\\.js$/, /\\.d\\.ts$/],\n      }),\n      new RunScriptWebpackPlugin({ name: options.output.filename, autoRestart: false }),\n    ],\n  };\n};\n"),e.qZA()(),e.TgZ(82,"blockquote",12)(83,"strong"),e._uU(84,"Hint"),e.qZA(),e._uU(85," With "),e.TgZ(86,"strong"),e._uU(87,"Yarn Berry"),e.qZA(),e._uU(88," (not classic Yarn), instead of using the "),e.TgZ(89,"code"),e._uU(90,"nodeExternals"),e.qZA(),e._uU(91," in the "),e.TgZ(92,"code"),e._uU(93,"externals"),e.qZA(),e._uU(94," configuration property, use the "),e.TgZ(95,"code"),e._uU(96,"WebpackPnpExternals"),e.qZA(),e._uU(97," from "),e.TgZ(98,"code"),e._uU(99,"webpack-pnp-externals"),e.qZA(),e._uU(100," package: "),e.TgZ(101,"code"),e._uU(102),e.qZA(),e._uU(103,".\n"),e.qZA(),e.TgZ(104,"p"),e._uU(105,"This function takes the original object containing the default webpack configuration as a first argument, and the reference to the underlying "),e.TgZ(106,"code"),e._uU(107,"webpack"),e.qZA(),e._uU(108," package used by the Nest CLI as the second one. Also, it returns a modified webpack configuration with the "),e.TgZ(109,"code"),e._uU(110,"HotModuleReplacementPlugin"),e.qZA(),e._uU(111,", "),e.TgZ(112,"code"),e._uU(113,"WatchIgnorePlugin"),e.qZA(),e._uU(114,", and "),e.TgZ(115,"code"),e._uU(116,"RunScriptWebpackPlugin"),e.qZA(),e._uU(117," plugins."),e.qZA(),e.TgZ(118,"h4",15)(119,"span"),e._uU(120,"Hot-Module Replacement"),e.qZA()(),e.TgZ(121,"p"),e._uU(122,"To enable "),e.TgZ(123,"strong"),e._uU(124,"HMR"),e.qZA(),e._uU(125,", open the application entry file ("),e.TgZ(126,"code"),e._uU(127,"main.ts"),e.qZA(),e._uU(128,") and add the following webpack-related instructions:"),e.qZA(),e.TgZ(129,"pre")(130,"code",14),e._uU(131,"\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(132,"p"),e._uU(133,"To simplify the execution process, add a script to your "),e.TgZ(134,"code"),e._uU(135,"package.json"),e.qZA(),e._uU(136," file."),e.qZA(),e.TgZ(137,"pre")(138,"code",16),e._uU(139,'\n"start:dev": "nest build --webpack --webpackPath webpack-hmr.config.js --watch"\n'),e.qZA()(),e.TgZ(140,"p"),e._uU(141,"Now simply open your command line and run the following command:"),e.qZA(),e.TgZ(142,"pre")(143,"code",11),e._uU(144,"\n$ npm run start:dev\n"),e.qZA()(),e.TgZ(145,"h3",17),e._uU(146,"Without CLI"),e.qZA(),e.TgZ(147,"p"),e._uU(148,"If you are not using the "),e.TgZ(149,"a",9),e._uU(150,"Nest CLI"),e.qZA(),e._uU(151,", the configuration will be slightly more complex (will require more manual steps)."),e.qZA(),e.TgZ(152,"h4",18)(153,"span"),e._uU(154,"Installation"),e.qZA()(),e.TgZ(155,"p"),e._uU(156,"First install the required packages:"),e.qZA(),e.TgZ(157,"pre")(158,"code",11),e._uU(159,"\n$ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin\n"),e.qZA()(),e.TgZ(160,"blockquote",12)(161,"strong"),e._uU(162,"Hint"),e.qZA(),e._uU(163," If you use "),e.TgZ(164,"strong"),e._uU(165,"Yarn Berry"),e.qZA(),e._uU(166," (not classic Yarn), install the "),e.TgZ(167,"code"),e._uU(168,"webpack-pnp-externals"),e.qZA(),e._uU(169," package instead of the "),e.TgZ(170,"code"),e._uU(171,"webpack-node-externals"),e.qZA(),e._uU(172,".\n"),e.qZA(),e.TgZ(173,"h4",19)(174,"span"),e._uU(175,"Configuration"),e.qZA()(),e.TgZ(176,"p"),e._uU(177,"Once the installation is complete, create a "),e.TgZ(178,"code"),e._uU(179,"webpack.config.js"),e.qZA(),e._uU(180," file in the root directory of your application."),e.qZA(),e.TgZ(181,"pre")(182,"code",14),e._uU(183,"\nconst webpack = require('webpack');\nconst path = require('path');\nconst nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = {\n  entry: ['webpack/hot/poll?100', './src/main.ts'],\n  target: 'node',\n  externals: [\n    nodeExternals({\n      allowlist: ['webpack/hot/poll?100'],\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  mode: 'development',\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new RunScriptWebpackPlugin({ name: 'server.js', autoRestart: false }),\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'server.js',\n  },\n};\n"),e.qZA()(),e.TgZ(184,"blockquote",12)(185,"strong"),e._uU(186,"Hint"),e.qZA(),e._uU(187," With "),e.TgZ(188,"strong"),e._uU(189,"Yarn Berry"),e.qZA(),e._uU(190," (not classic Yarn), instead of using the "),e.TgZ(191,"code"),e._uU(192,"nodeExternals"),e.qZA(),e._uU(193," in the "),e.TgZ(194,"code"),e._uU(195,"externals"),e.qZA(),e._uU(196," configuration property, use the "),e.TgZ(197,"code"),e._uU(198,"WebpackPnpExternals"),e.qZA(),e._uU(199," from "),e.TgZ(200,"code"),e._uU(201,"webpack-pnp-externals"),e.qZA(),e._uU(202," package: "),e.TgZ(203,"code"),e._uU(204),e.qZA(),e._uU(205,".\n"),e.qZA(),e.TgZ(206,"p"),e._uU(207,"This configuration tells webpack a few essential things about your application: location of the entry file, which directory should be used to hold "),e.TgZ(208,"strong"),e._uU(209,"compiled"),e.qZA(),e._uU(210," files, and what kind of loader we want to use to compile source files. Generally, you should be able to use this file as-is, even if you don't fully understand all of the options."),e.qZA(),e.TgZ(211,"h4",20)(212,"span"),e._uU(213,"Hot-Module Replacement"),e.qZA()(),e.TgZ(214,"p"),e._uU(215,"To enable "),e.TgZ(216,"strong"),e._uU(217,"HMR"),e.qZA(),e._uU(218,", open the application entry file ("),e.TgZ(219,"code"),e._uU(220,"main.ts"),e.qZA(),e._uU(221,") and add the following webpack-related instructions:"),e.qZA(),e.TgZ(222,"pre")(223,"code",14),e._uU(224,"\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(225,"p"),e._uU(226,"To simplify the execution process, add a script to your "),e.TgZ(227,"code"),e._uU(228,"package.json"),e.qZA(),e._uU(229," file."),e.qZA(),e.TgZ(230,"pre")(231,"code",16),e._uU(232,'\n"start:dev": "webpack --config webpack.config.js --watch"\n'),e.qZA()(),e.TgZ(233,"p"),e._uU(234,"Now simply open your command line and run the following command:"),e.qZA(),e.TgZ(235,"pre")(236,"code",11),e._uU(237,"\n$ npm run start:dev\n"),e.qZA()(),e.TgZ(238,"h4",21)(239,"span"),e._uU(240,"Example"),e.qZA()(),e.TgZ(241,"p"),e._uU(242,"A working example is available "),e.TgZ(243,"a",22),e._uU(244,"here"),e.qZA(),e._uU(245,"."),e.qZA()()),2&o&&(e.xp6(102),e.AsE("WebpackPnpExternals(","{"," exclude: ['webpack/hot/poll?100'] ","}",")"),e.xp6(102),e.AsE("WebpackPnpExternals(","{"," exclude: ['webpack/hot/poll?100'] ","}",")"))},dependencies:[u.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Hot reload"}},{path:"serve-static",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-serve-static"]],features:[e.qOj],decls:80,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/serve-static.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","serve-static"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/@nestjs/serve-static"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","bootstrap"],[1,"language-typescript"],["appAnchor","","id","configuration"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/serve-static"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/serve-static/blob/master/lib/interfaces/serve-static-options.interface.ts"],[1,"warning"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/24-serve-static"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Serve Static"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"In order to serve static content like a Single Page Application (SPA) we can use the "),e.TgZ(9,"code"),e._uU(10,"ServeStaticModule"),e.qZA(),e._uU(11," from the "),e.TgZ(12,"a",6)(13,"code"),e._uU(14,"@nestjs/serve-static"),e.qZA()(),e._uU(15," package."),e.qZA(),e.TgZ(16,"h4",7)(17,"span"),e._uU(18,"Installation"),e.qZA()(),e.TgZ(19,"p"),e._uU(20,"First we need to install the required package:"),e.qZA(),e.TgZ(21,"pre")(22,"code",8),e._uU(23,"\n$ npm install --save @nestjs/serve-static\n"),e.qZA()(),e.TgZ(24,"h4",9)(25,"span"),e._uU(26,"Bootstrap"),e.qZA()(),e.TgZ(27,"p"),e._uU(28,"Once the installation process is done, we can import the "),e.TgZ(29,"code"),e._uU(30,"ServeStaticModule"),e.qZA(),e._uU(31," into the root "),e.TgZ(32,"code"),e._uU(33,"AppModule"),e.qZA(),e._uU(34," and configure it by passing in a configuration object to the "),e.TgZ(35,"code"),e._uU(36,"forRoot()"),e.qZA(),e._uU(37," method."),e.qZA(),e.TgZ(38,"pre")(39,"code",10),e._uU(40,"\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(41,"p"),e._uU(42,"With this in place, build the static website and place its content in the location specified by the "),e.TgZ(43,"code"),e._uU(44,"rootPath"),e.qZA(),e._uU(45," property."),e.qZA(),e.TgZ(46,"h4",11)(47,"span"),e._uU(48,"Configuration"),e.qZA()(),e.TgZ(49,"p")(50,"a",12),e._uU(51,"ServeStaticModule"),e.qZA(),e._uU(52," can be configured with a variety of options to customize its behavior.\nYou can set the path to render your static app, specify excluded paths, enable or disable setting Cache-Control response header, etc. See the full list of options "),e.TgZ(53,"a",13),e._uU(54,"here"),e.qZA(),e._uU(55,"."),e.qZA(),e.TgZ(56,"blockquote",14)(57,"strong"),e._uU(58,"Notice"),e.qZA(),e._uU(59," The default "),e.TgZ(60,"code"),e._uU(61,"renderPath"),e.qZA(),e._uU(62," of the Static App is "),e.TgZ(63,"code"),e._uU(64,"*"),e.qZA(),e._uU(65,' (all paths), and the module will send "index.html" files in response.\nIt lets you create Client-Side routing for your SPA. Paths, specified in your controllers will fallback to the server.\nYou can change this behavior setting '),e.TgZ(66,"code"),e._uU(67,"serveRoot"),e.qZA(),e._uU(68,", "),e.TgZ(69,"code"),e._uU(70,"renderPath"),e.qZA(),e._uU(71," combining them with other options.\n"),e.qZA(),e.TgZ(72,"h4",15)(73,"span"),e._uU(74,"Example"),e.qZA()(),e.TgZ(75,"p"),e._uU(76,"A working example is available "),e.TgZ(77,"a",16),e._uU(78,"here"),e.qZA(),e._uU(79,"."),e.qZA()())},dependencies:[u.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Serve static"}},{path:"router-module",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-router-module"]],features:[e.qOj],decls:84,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/router-module.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","router-module"],[1,"info"],["href","/controllers#routing"],["routerLink","/faq/global-prefix"],["routerLink","/techniques/versioning"],[1,"language-typescript"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Router module"),e.qZA(),e.TgZ(7,"blockquote",6)(8,"strong"),e._uU(9,"Hint"),e.qZA(),e._uU(10," This chapter is only relevant to HTTP-based applications.\n"),e.qZA(),e.TgZ(11,"p"),e._uU(12,"In an HTTP application (for example, REST API), the route path for a handler is determined by concatenating the (optional) prefix declared for the controller (inside the "),e.TgZ(13,"code"),e._uU(14,"@Controller"),e.qZA(),e._uU(15," decorator),\nand any path specified in the method's decorator (e.g, "),e.TgZ(16,"code"),e._uU(17,"@Get('users')"),e.qZA(),e._uU(18,"). You can learn more about that in "),e.TgZ(19,"a",7),e._uU(20,"this section"),e.qZA(),e._uU(21,". Additionally,\nyou can define a "),e.TgZ(22,"a",8),e._uU(23,"global prefix"),e.qZA(),e._uU(24," for all routes registered in your application, or enable "),e.TgZ(25,"a",9),e._uU(26,"versioning"),e.qZA(),e._uU(27,"."),e.qZA(),e.TgZ(28,"p"),e._uU(29,'Also, there are edge-cases when defining a prefix at a module-level (and so for all controllers registered inside that module) may come in handy.\nFor example, imagine a REST application that exposes several different endpoints being used by a specific portion of your application called "Dashboard".\nIn such a case, instead of repeating the '),e.TgZ(30,"code"),e._uU(31,"/dashboard"),e.qZA(),e._uU(32," prefix within each controller, you could use a utility "),e.TgZ(33,"code"),e._uU(34,"RouterModule"),e.qZA(),e._uU(35," module, as follows:"),e.qZA(),e.TgZ(36,"pre")(37,"code",10),e._uU(38,"\n@Module({\n  imports: [\n    DashboardModule,\n    RouterModule.register([\n      {\n        path: 'dashboard',\n        module: DashboardModule,\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(39,"blockquote",6)(40,"strong"),e._uU(41,"Hint"),e.qZA(),e._uU(42," The "),e.TgZ(43,"code"),e._uU(44,"RouterModule"),e.qZA(),e._uU(45," class is exported from the "),e.TgZ(46,"code"),e._uU(47,"@nestjs/core"),e.qZA(),e._uU(48," package.\n"),e.qZA(),e.TgZ(49,"p"),e._uU(50,"In addition, you can define hierarchical structures. This means each module can have "),e.TgZ(51,"code"),e._uU(52,"children"),e.qZA(),e._uU(53," modules.\nThe children modules will inherit their parent's prefix. In the following example, we'll register the "),e.TgZ(54,"code"),e._uU(55,"AdminModule"),e.qZA(),e._uU(56," as a parent module of "),e.TgZ(57,"code"),e._uU(58,"DashboardModule"),e.qZA(),e._uU(59," and "),e.TgZ(60,"code"),e._uU(61,"MetricsModule"),e.qZA(),e._uU(62,"."),e.qZA(),e.TgZ(63,"pre")(64,"code",10),e._uU(65,"\nRouterModule.register([\n  {\n    path: 'admin',\n    module: AdminModule,\n    children: [\n      {\n        path: 'dashboard',\n        module: DashboardModule,\n      },\n      {\n        path: 'metrics',\n        module: MetricsModule,\n      },\n    ],\n  },\n]);\n"),e.qZA()(),e.TgZ(66,"blockquote",6)(67,"strong"),e._uU(68,"Hint"),e.qZA(),e._uU(69," This feature should be used very carefully, as overusing it can make code difficult to maintain over time.\n"),e.qZA(),e.TgZ(70,"p"),e._uU(71,"In the example above, any controller registered inside the "),e.TgZ(72,"code"),e._uU(73,"DashboardModule"),e.qZA(),e._uU(74," will have an extra "),e.TgZ(75,"code"),e._uU(76,"/admin/dashboard"),e.qZA(),e._uU(77," prefix (as the module concatenates paths from top to bottom - recursively - parent to children).\nLikewise, each controller defined inside the "),e.TgZ(78,"code"),e._uU(79,"MetricsModule"),e.qZA(),e._uU(80," will have an additional module-level prefix "),e.TgZ(81,"code"),e._uU(82,"/admin/metrics"),e.qZA(),e._uU(83,"."),e.qZA()())},dependencies:[g.yS],encapsulation:2,changeDetection:0}),t})(),data:{title:"Router module"}},{path:"nest-commander",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-nest-commander"]],features:[e.qOj],decls:217,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/nest-commander.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","nest-commander"],["routerLink","/standalone-applications"],["rel","nofollow","target","_blank","href","https://jmcdo29.github.io/nest-commander"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/jmcdo29/nest-commander/issues/new/choose"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","a-command-file"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/decorators.html"],["appAnchor","","id","running-the-command"],[1,"language-ts"],["appAnchor","","id","testing"],["appAnchor","","id","putting-it-all-together"],["appAnchor","","id","more-information"]],template:function(o,a){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Nest Commander"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Expanding on the "),e.TgZ(9,"a",6),e._uU(10,"standalone application"),e.qZA(),e._uU(11," docs there's also the "),e.TgZ(12,"a",7),e._uU(13,"nest-commander"),e.qZA(),e._uU(14," package for writing command line applications in a structure similar to your typical Nest application."),e.qZA(),e.TgZ(15,"blockquote",8)(16,"strong"),e._uU(17,"info"),e.qZA(),e.TgZ(18,"code"),e._uU(19,"nest-commander"),e.qZA(),e._uU(20," is a third party package and is not managed by the entirety of the NestJS core team. Please, report any issues found with the library in the "),e.TgZ(21,"a",9),e._uU(22,"appropriate repository"),e.qZA()(),e.TgZ(23,"h4",10)(24,"span"),e._uU(25,"Installation"),e.qZA()(),e.TgZ(26,"p"),e._uU(27,"Just like any other package, you've got to install it before you can use it."),e.qZA(),e.TgZ(28,"pre")(29,"code",11),e._uU(30,"\n$ npm i nest-commander\n"),e.qZA()(),e.TgZ(31,"h4",12)(32,"span"),e._uU(33,"A Command file"),e.qZA()(),e.TgZ(34,"p")(35,"code"),e._uU(36,"nest-commander"),e.qZA(),e._uU(37," makes it easy to write new command-line applications with "),e.TgZ(38,"a",13),e._uU(39,"decorators"),e.qZA(),e._uU(40," via the "),e.TgZ(41,"code"),e._uU(42,"@Command()"),e.qZA(),e._uU(43," decorator for classes and the "),e.TgZ(44,"code"),e._uU(45,"@Option()"),e.qZA(),e._uU(46," decorator for methods of that class. Every command file should implement the "),e.TgZ(47,"code"),e._uU(48,"CommandRunner"),e.qZA(),e._uU(49," abstract class and should be decorated with a "),e.TgZ(50,"code"),e._uU(51,"@Command()"),e.qZA(),e._uU(52," decorator."),e.qZA(),e.TgZ(53,"p"),e._uU(54,"Every command is seen as an "),e.TgZ(55,"code"),e._uU(56,"@Injectable()"),e.qZA(),e._uU(57," by Nest, so your normal Dependency Injection still works as you would expect it to. The only thing to take note of is the abstract class "),e.TgZ(58,"code"),e._uU(59,"CommandRunner"),e.qZA(),e._uU(60,", which should be implemented by each command. The "),e.TgZ(61,"code"),e._uU(62,"CommandRunner"),e.qZA(),e._uU(63," abstract class ensures that all commands have a "),e.TgZ(64,"code"),e._uU(65,"run"),e.qZA(),e._uU(66," method that returns a "),e.TgZ(67,"code"),e._uU(68,"Promise<void>"),e.qZA(),e._uU(69," and takes in the parameters "),e.TgZ(70,"code"),e._uU(71,"string[], Record<string, any>"),e.qZA(),e._uU(72,". The "),e.TgZ(73,"code"),e._uU(74,"run"),e.qZA(),e._uU(75," command is where you can kick all of your logic off from, it will take in whatever parameters did not match option flags and pass them in as an array, just in case you are really meaning to work with multiple parameters. As for the options, the "),e.TgZ(76,"code"),e._uU(77,"Record<string, any>"),e.qZA(),e._uU(78,", the names of these properties match the "),e.TgZ(79,"code"),e._uU(80,"name"),e.qZA(),e._uU(81," property given to the "),e.TgZ(82,"code"),e._uU(83,"@Option()"),e.qZA(),e._uU(84," decorators, while their value matches the return of the option handler. If you'd like better type safety, you are welcome to create an interface for your options as well."),e.qZA(),e.TgZ(85,"h4",14)(86,"span"),e._uU(87,"Running the Command"),e.qZA()(),e.TgZ(88,"p"),e._uU(89,"Similar to how in a NestJS application we can use the "),e.TgZ(90,"code"),e._uU(91,"NestFactory"),e.qZA(),e._uU(92," to create a server for us, and run it using "),e.TgZ(93,"code"),e._uU(94,"listen"),e.qZA(),e._uU(95,", the "),e.TgZ(96,"code"),e._uU(97,"nest-commander"),e.qZA(),e._uU(98," package exposes a simple to use API to run your server. Import the "),e.TgZ(99,"code"),e._uU(100,"CommandFactory"),e.qZA(),e._uU(101," and use the "),e.TgZ(102,"code"),e._uU(103,"static"),e.qZA(),e._uU(104," method "),e.TgZ(105,"code"),e._uU(106,"run"),e.qZA(),e._uU(107," and pass in the root module of your application. This would probably look like below"),e.qZA(),e.TgZ(108,"pre")(109,"code",15),e._uU(110,"\nimport { CommandFactory } from 'nest-commander';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  await CommandFactory.run(AppModule);\n}\n\nbootstrap();\n"),e.qZA()(),e.TgZ(111,"p"),e._uU(112,"By default, Nest's logger is disabled when using the "),e.TgZ(113,"code"),e._uU(114,"CommandFactory"),e.qZA(),e._uU(115,". It's possible to provide it though, as the second argument to the "),e.TgZ(116,"code"),e._uU(117,"run"),e.qZA(),e._uU(118," function. You can either provide a custom NestJS logger, or an array of log levels you want to keep - it might be useful to at least provide "),e.TgZ(119,"code"),e._uU(120,"['error']"),e.qZA(),e._uU(121," here, if you only want to print out Nest's error logs."),e.qZA(),e.TgZ(122,"pre")(123,"code",15),e._uU(124,"\nimport { CommandFactory } from 'nest-commander';\nimport { AppModule } from './app.module';\nimport { LogService } './log.service';\n\nasync function bootstrap() {\n  await CommandFactory.run(AppModule, new LogService());\n\n  // or, if you only want to print Nest's warnings and errors\n  await CommandFactory.run(AppModule, ['warn', 'error']);\n}\n\nbootstrap();\n"),e.qZA()(),e.TgZ(125,"p"),e._uU(126,"And that's it. Under the hood, "),e.TgZ(127,"code"),e._uU(128,"CommandFactory"),e.qZA(),e._uU(129," will worry about calling "),e.TgZ(130,"code"),e._uU(131,"NestFactory"),e.qZA(),e._uU(132," for you and calling "),e.TgZ(133,"code"),e._uU(134,"app.close()"),e.qZA(),e._uU(135," when necessary, so you shouldn't need to worry about memory leaks there. If you need to add in some error handling, there's always "),e.TgZ(136,"code"),e._uU(137,"try/catch"),e.qZA(),e._uU(138," wrapping the "),e.TgZ(139,"code"),e._uU(140,"run"),e.qZA(),e._uU(141," command, or you can chain on some "),e.TgZ(142,"code"),e._uU(143,".catch()"),e.qZA(),e._uU(144," method to the "),e.TgZ(145,"code"),e._uU(146,"bootstrap()"),e.qZA(),e._uU(147," call."),e.qZA(),e.TgZ(148,"h4",16)(149,"span"),e._uU(150,"Testing"),e.qZA()(),e.TgZ(151,"p"),e._uU(152,"So what's the use of writing a super awesome command line script if you can't test it super easily, right? Fortunately, "),e.TgZ(153,"code"),e._uU(154,"nest-commander"),e.qZA(),e._uU(155," has some utilities you can make use of that fits in perfectly with the NestJS ecosystem, it'll feel right at home to any Nestlings out there. Instead of using the "),e.TgZ(156,"code"),e._uU(157,"CommandFactory"),e.qZA(),e._uU(158," for building the command in test mode, you can use "),e.TgZ(159,"code"),e._uU(160,"CommandTestFactory"),e.qZA(),e._uU(161," and pass in your metadata, very similarly to how "),e.TgZ(162,"code"),e._uU(163,"Test.createTestingModule"),e.qZA(),e._uU(164," from "),e.TgZ(165,"code"),e._uU(166,"@nestjs/testing"),e.qZA(),e._uU(167," works. In fact, it uses this package under the hood. You're also still able to chain on the "),e.TgZ(168,"code"),e._uU(169,"overrideProvider"),e.qZA(),e._uU(170," methods before calling "),e.TgZ(171,"code"),e._uU(172,"compile()"),e.qZA(),e._uU(173," so you can swap out DI pieces right in the test."),e.qZA(),e.TgZ(174,"h4",17)(175,"span"),e._uU(176,"Putting it all together"),e.qZA()(),e.TgZ(177,"p"),e._uU(178,"The following class would equate to having a CLI command that can take in the subcommand "),e.TgZ(179,"code"),e._uU(180,"basic"),e.qZA(),e._uU(181," or be called directly, with "),e.TgZ(182,"code"),e._uU(183,"-n"),e.qZA(),e._uU(184,", "),e.TgZ(185,"code"),e._uU(186,"-s"),e.qZA(),e._uU(187,", and "),e.TgZ(188,"code"),e._uU(189,"-b"),e.qZA(),e._uU(190," (along with their long flags) all being supported and with custom parsers for each option. The "),e.TgZ(191,"code"),e._uU(192,"--help"),e.qZA(),e._uU(193," flag is also supported, as is customary with commander."),e.qZA(),e.TgZ(194,"pre")(195,"code",15),e._uU(196,"\nimport { Command, CommandRunner, Option } from 'nest-commander';\nimport { LogService } from './log.service';\n\ninterface BasicCommandOptions {\n  string?: string;\n  boolean?: boolean;\n  number?: number;\n}\n\n@Command({ name: 'basic', description: 'A parameter parse' })\nexport class BasicCommand extends CommandRunner {\n  constructor(private readonly logService: LogService) {\n    super()\n  }\n\n  async run(\n    passedParam: string[],\n    options?: BasicCommandOptions,\n  ): Promise<void> {\n    if (options?.boolean !== undefined && options?.boolean !== null) {\n      this.runWithBoolean(passedParam, options.boolean);\n    } else if (options?.number) {\n      this.runWithNumber(passedParam, options.number);\n    } else if (options?.string) {\n      this.runWithString(passedParam, options.string);\n    } else {\n      this.runWithNone(passedParam);\n    }\n  }\n\n  @Option({\n    flags: '-n, --number [number]',\n    description: 'A basic number parser',\n  })\n  parseNumber(val: string): number {\n    return Number(val);\n  }\n\n  @Option({\n    flags: '-s, --string [string]',\n    description: 'A string return',\n  })\n  parseString(val: string): string {\n    return val;\n  }\n\n  @Option({\n    flags: '-b, --boolean [boolean]',\n    description: 'A boolean parser',\n  })\n  parseBoolean(val: string): boolean {\n    return JSON.parse(val);\n  }\n\n  runWithString(param: string[], option: string): void {\n    this.logService.log({ param, string: option });\n  }\n\n  runWithNumber(param: string[], option: number): void {\n    this.logService.log({ param, number: option });\n  }\n\n  runWithBoolean(param: string[], option: boolean): void {\n    this.logService.log({ param, boolean: option });\n  }\n\n  runWithNone(param: string[]): void {\n    this.logService.log({ param });\n  }\n}\n"),e.qZA()(),e.TgZ(197,"p"),e._uU(198,"Make sure the command class is added to a module"),e.qZA(),e.TgZ(199,"pre")(200,"code",15),e._uU(201,"\n@Module({\n  providers: [LogService, BasicCommand],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(202,"p"),e._uU(203,"And now to be able to run the CLI in your main.ts you can do the following"),e.qZA(),e.TgZ(204,"pre")(205,"code",15),e._uU(206,"\nasync function bootstrap() {\n  await CommandFactory.run(AppModule);\n}\n\nbootstrap();\n"),e.qZA()(),e.TgZ(207,"p"),e._uU(208,"And just like that, you've got a command line application."),e.qZA(),e.TgZ(209,"h4",18)(210,"span"),e._uU(211,"More Information"),e.qZA()(),e.TgZ(212,"p"),e._uU(213,"Visit the "),e.TgZ(214,"a",7),e._uU(215,"nest-commander docs site"),e.qZA(),e._uU(216," for more information, examples, and API documentation."),e.qZA()())},dependencies:[u.U,g.yS],encapsulation:2,changeDetection:0}),t})(),data:{title:"Nest Commander"}},{path:"repl",component:(()=>{class t extends i.y{}return t.\u0275fac=function(){let n;return function(a){return(n||(n=e.n5z(t)))(a||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-repl"]],features:[e.qOj],decls:175,vars:8,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/repl.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","read-eval-print-loop-repl"],["appAnchor","","id","usage"],[1,"filename"],["appf9030de0ff6be5c97accbc952a9154b73937d014",""],[1,"language-typescript"],[1,"language-bash"],[1,"info"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/repl.html"],["src","/assets/repl.gif","alt","REPL example"],["appAnchor","","id","native-functions"],[1,"language-text"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/2/functions.html#function-type-expressions"]],template:function(o,a){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Read-Eval-Print-Loop (REPL)"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"REPL is a simple interactive environment that takes single user inputs, executes them, and returns the result to the user.\nThe REPL feature lets you inspect your dependency graph and call methods on your providers (and controllers) directly from your terminal."),e.qZA(),e.TgZ(9,"h4",6)(10,"span"),e._uU(11,"Usage"),e.qZA()(),e.TgZ(12,"p"),e._uU(13,"To run your NestJS application in REPL mode, create a new "),e.TgZ(14,"code"),e._uU(15,"repl.ts"),e.qZA(),e._uU(16," file (alongside the existing "),e.TgZ(17,"code"),e._uU(18,"main.ts"),e.qZA(),e._uU(19," file) and add the following code inside:"),e.qZA(),e.TgZ(20,"span",7),e._uU(21),e.ALo(22,"extension"),e._UZ(23,"app-tabs",null,8),e.qZA(),e.TgZ(25,"pre")(26,"code",9),e._uU(27,"\nimport { repl } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  await repl(AppModule);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(28,"pre")(29,"code",9),e._uU(30,"\nimport { repl } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  await repl(AppModule);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(31,"p"),e._uU(32,"Now in your terminal, start the REPL with the following command:"),e.qZA(),e.TgZ(33,"pre")(34,"code",10),e._uU(35,"\n$ npm run start -- --entryFile repl\n"),e.qZA()(),e.TgZ(36,"blockquote",11)(37,"strong"),e._uU(38,"Hint"),e.qZA(),e.TgZ(39,"code"),e._uU(40,"repl"),e.qZA(),e._uU(41," returns a "),e.TgZ(42,"a",12),e._uU(43,"Node.js REPL server"),e.qZA(),e._uU(44," object.\n"),e.qZA(),e.TgZ(45,"p"),e._uU(46,"Once it's up and running, you should see the following message in your console:"),e.qZA(),e.TgZ(47,"pre")(48,"code",10),e._uU(49,"\nLOG [NestFactory] Starting Nest application...\nLOG [InstanceLoader] AppModule dependencies initialized\nLOG REPL initialized\n"),e.qZA()(),e.TgZ(50,"p"),e._uU(51,"And now you can start interacting with your dependencies graph. For instance, you can retrieve an "),e.TgZ(52,"code"),e._uU(53,"AppService"),e.qZA(),e._uU(54," (we are using the starter project as an example here) and call the "),e.TgZ(55,"code"),e._uU(56,"getHello()"),e.qZA(),e._uU(57," method:"),e.qZA(),e.TgZ(58,"pre")(59,"code",9),e._uU(60,"\n> get(AppService).getHello()\n'Hello World!'\n"),e.qZA()(),e.TgZ(61,"p"),e._uU(62,"You can execute any JavaScript code from within your terminal, for example, assign an instance of the "),e.TgZ(63,"code"),e._uU(64,"AppController"),e.qZA(),e._uU(65," to a local variable, and use "),e.TgZ(66,"code"),e._uU(67,"await"),e.qZA(),e._uU(68," to call an asynchronous method:"),e.qZA(),e.TgZ(69,"pre")(70,"code",9),e._uU(71,"\n> appController = get(AppController)\nAppController { appService: AppService {} }\n> await appController.getHello()\n'Hello World!'\n"),e.qZA()(),e.TgZ(72,"p"),e._uU(73,"To display all public methods available on a given provider or controller, use the "),e.TgZ(74,"code"),e._uU(75,"methods()"),e.qZA(),e._uU(76," function, as follows:"),e.qZA(),e.TgZ(77,"pre")(78,"code",9),e._uU(79,"\n> methods(AppController)\n\nMethods:\n \u25fb getHello\n"),e.qZA()(),e.TgZ(80,"p"),e._uU(81,"To print all registered modules as a list together with their controllers and providers, use "),e.TgZ(82,"code"),e._uU(83,"debug()"),e.qZA(),e._uU(84,"."),e.qZA(),e.TgZ(85,"pre")(86,"code",9),e._uU(87,"\n> debug()\n\nAppModule:\n - controllers:\n  \u25fb AppController\n - providers:\n  \u25fb AppService\n"),e.qZA()(),e.TgZ(88,"p"),e._uU(89,"Quick demo:"),e.qZA(),e.TgZ(90,"figure"),e._UZ(91,"img",13),e.qZA(),e.TgZ(92,"p"),e._uU(93,"You can find more information about the existing, predefined native methods in the section below."),e.qZA(),e.TgZ(94,"h4",14)(95,"span"),e._uU(96,"Native functions"),e.qZA()(),e.TgZ(97,"p"),e._uU(98,"The built-in NestJS REPL comes with a few native functions that are globally available when you start REPL. You can call "),e.TgZ(99,"code"),e._uU(100,"help()"),e.qZA(),e._uU(101," to list them out."),e.qZA(),e.TgZ(102,"p"),e._uU(103,"If you don't recall what's the signature (ie: expected parameters and a return type) of a function, you can call "),e.TgZ(104,"code"),e._uU(105,"<function_name>.help"),e.qZA(),e._uU(106,".\nFor instance:"),e.qZA(),e.TgZ(107,"pre")(108,"code",15),e._uU(109,"\n> $.help\nRetrieves an instance of either injectable or controller, otherwise, throws exception.\nInterface: $(token: InjectionToken) => any\n"),e.qZA()(),e.TgZ(110,"blockquote",11)(111,"strong"),e._uU(112,"Hint"),e.qZA(),e._uU(113," Those function interfaces are written in "),e.TgZ(114,"a",16),e._uU(115,"TypeScript function type expression syntax"),e.qZA(),e._uU(116,".\n"),e.qZA(),e.TgZ(117,"table")(118,"thead")(119,"tr")(120,"th"),e._uU(121,"Function"),e.qZA(),e.TgZ(122,"th"),e._uU(123,"Description"),e.qZA(),e.TgZ(124,"th"),e._uU(125,"Signature"),e.qZA()()(),e.TgZ(126,"tbody")(127,"tr")(128,"td")(129,"code"),e._uU(130,"debug"),e.qZA()(),e.TgZ(131,"td"),e._uU(132,"Print all registered modules as a list together with their controllers and providers."),e.qZA(),e.TgZ(133,"td")(134,"code"),e._uU(135,"debug(moduleCls?: ClassRef | string) => void"),e.qZA()()(),e.TgZ(136,"tr")(137,"td")(138,"code"),e._uU(139,"get"),e.qZA(),e._uU(140," or "),e.TgZ(141,"code"),e._uU(142,"$"),e.qZA()(),e.TgZ(143,"td"),e._uU(144,"Retrieves an instance of either injectable or controller, otherwise, throws exception."),e.qZA(),e.TgZ(145,"td")(146,"code"),e._uU(147,"get(token: InjectionToken) => any"),e.qZA()()(),e.TgZ(148,"tr")(149,"td")(150,"code"),e._uU(151,"methods"),e.qZA()(),e.TgZ(152,"td"),e._uU(153,"Display all public methods available on a given provider or controller."),e.qZA(),e.TgZ(154,"td")(155,"code"),e._uU(156,"methods(token: ClassRef | string) => void"),e.qZA()()(),e.TgZ(157,"tr")(158,"td")(159,"code"),e._uU(160,"resolve"),e.qZA()(),e.TgZ(161,"td"),e._uU(162,"Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception."),e.qZA(),e.TgZ(163,"td")(164,"code"),e._uU(165,"resolve(token: InjectionToken, contextId: any) => Promise<any>"),e.qZA()()(),e.TgZ(166,"tr")(167,"td")(168,"code"),e._uU(169,"select"),e.qZA()(),e.TgZ(170,"td"),e._uU(171,"Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module."),e.qZA(),e.TgZ(172,"td")(173,"code"),e._uU(174,"select(token: DynamicModule | ClassRef) => INestApplicationContext"),e.qZA()()()()()()),2&o){const r=e.MAs(24);e.xp6(21),e.hij(" ",e.xi3(22,5,"repl",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive)}},dependencies:[Z.n,u.U,m.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"REPL"}}];let v=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[y.ez,b.m,g.Bz.forChild(w)]}),t})()}}]);